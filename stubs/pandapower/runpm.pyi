from _typeshed import Incomplete

from pandapower.opf.pm_storage import read_pm_storage_results as read_pm_storage_results

def runpm(
    net,
    julia_file: Incomplete | None = ...,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    pm_mip_solver: str = ...,
    pm_nl_solver: str = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    delete_buffer_file: bool = ...,
    pm_file_path: Incomplete | None = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_dc_opf(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    delete_buffer_file: bool = ...,
    pm_file_path: Incomplete | None = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_ac_opf(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    pm_file_path: Incomplete | None = ...,
    delete_buffer_file: bool = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_tnep(
    net,
    julia_file: Incomplete | None = ...,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_nl_solver: str = ...,
    pm_mip_solver: str = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    delete_buffer_file: bool = ...,
    pm_file_path: Incomplete | None = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_ots(
    net,
    julia_file: Incomplete | None = ...,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    pm_nl_solver: str = ...,
    pm_mip_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    delete_buffer_file: bool = ...,
    pm_file_path: Incomplete | None = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_storage_opf(
    net,
    from_time_step,
    to_time_step,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    n_timesteps: int = ...,
    time_elapsed: float = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_solver: str = ...,
    pm_mip_solver: str = ...,
    pm_nl_solver: str = ...,
    pm_model: str = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    opf_flow_lim: str = ...,
    charge_efficiency: float = ...,
    discharge_efficiency: float = ...,
    standby_loss: float = ...,
    p_loss: float = ...,
    q_loss: float = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    delete_buffer_file: bool = ...,
    pm_file_path: Incomplete | None = ...,
    **kwargs,
) -> None: ...
def runpm_vstab(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    pm_file_path: Incomplete | None = ...,
    delete_buffer_file: bool = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_multi_vstab(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    pm_file_path: Incomplete | None = ...,
    delete_buffer_file: bool = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_qflex(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    pm_file_path: Incomplete | None = ...,
    delete_buffer_file: bool = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_multi_qflex(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    pm_file_path: Incomplete | None = ...,
    delete_buffer_file: bool = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_ploss(
    net,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    pm_file_path: Incomplete | None = ...,
    delete_buffer_file: bool = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
def runpm_pf(
    net,
    julia_file: Incomplete | None = ...,
    pp_to_pm_callback: Incomplete | None = ...,
    calculate_voltage_angles: bool = ...,
    trafo_model: str = ...,
    delta: float = ...,
    trafo3w_losses: str = ...,
    check_connectivity: bool = ...,
    correct_pm_network_data: bool = ...,
    silence: bool = ...,
    pm_model: str = ...,
    pm_solver: str = ...,
    pm_mip_solver: str = ...,
    pm_nl_solver: str = ...,
    pm_time_limits: Incomplete | None = ...,
    pm_log_level: int = ...,
    delete_buffer_file: bool = ...,
    pm_file_path: Incomplete | None = ...,
    opf_flow_lim: str = ...,
    pm_tol: float = ...,
    pdm_dev_mode: bool = ...,
    **kwargs,
) -> None: ...
