from _typeshed import Incomplete
from typing import Literal
from typing_extensions import TypeAlias

from pandapower.auxiliary import pandapowerNet
from pandas import DataFrame

_Element: TypeAlias = Literal["line", "trafo", "trafo3w"]
_StdType: TypeAlias = dict[str, Incomplete]
_StdTypes: TypeAlias = dict[str, _StdType]

def create_std_type(
    net: pandapowerNet, data: _StdType, name: str, element: _Element = "line", overwrite: bool = True, check_required: bool = True
) -> None: ...
def create_std_types(
    net: pandapowerNet, data: _StdTypes, element: _Element = "line", overwrite: bool = True, check_required: bool = True
) -> None: ...
def copy_std_types(
    to_net: pandapowerNet, from_net: pandapowerNet, element: _Element = "line", overwrite: bool = True
) -> None: ...
def load_std_type(net: pandapowerNet, name: str, element: _Element = "line") -> _StdType: ...
def std_type_exists(net: pandapowerNet, name: str, element: _Element = "line") -> bool: ...
def delete_std_type(net: pandapowerNet, name: str, element: _Element = "line") -> None: ...
def available_std_types(net: pandapowerNet, element: _Element = "line") -> DataFrame: ...
def parameter_from_std_type(
    net: pandapowerNet, parameter: str, element: _Element = "line", fill: Incomplete | None = None
) -> None: ...
def change_std_type(net: pandapowerNet, eid: int, name: str, element: _Element = "line") -> None: ...
def find_std_type_by_parameter(
    net: pandapowerNet, data: _StdType, element: _Element = "line", epsilon: float = 0
) -> list[str]: ...
def add_zero_impedance_parameters(net: pandapowerNet) -> None: ...
def add_temperature_coefficient(net: pandapowerNet, fill: Incomplete | None = None) -> None: ...
def basic_line_std_types() -> _StdTypes: ...
def basic_trafo_std_types() -> _StdTypes: ...
def basic_trafo3w_std_types() -> _StdTypes: ...
def basic_std_types() -> dict[str, _StdTypes]: ...
def add_basic_std_types(net: pandapowerNet) -> tuple[_StdTypes, _StdTypes, _StdTypes]: ...
