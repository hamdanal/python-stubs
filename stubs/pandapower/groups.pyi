from _typeshed import Incomplete
from collections.abc import Iterable

from numpy import bool_
from numpy.typing import NDArray
from pandapower.auxiliary import pandapowerNet
from pandas import Index, Series

def append_to_group(
    net: pandapowerNet,
    index: int,
    element_types: str | Iterable[str],
    elements: Iterable[list[Incomplete]],
    reference_columns: str | Iterable[str] | None = None,
) -> None: ...
def group_element_lists(net: pandapowerNet, index: int) -> tuple[list[Incomplete]]: ...
def group_name(net: pandapowerNet, index: int) -> str: ...
def isin_group(
    net: pandapowerNet,
    element_type: str,
    element_index: int | Iterable[int],
    index: int | Iterable[int] | None = None,
    drop_empty_lines: bool = True,
) -> bool | NDArray[bool_]: ...
def count_group_elements(net: pandapowerNet, index: int) -> Series[int]: ...
def groups_equal(net: pandapowerNet, index1: int, index2: int, **kwargs: Incomplete) -> bool: ...
def compare_group_elements(net: pandapowerNet, index1: int, index2: int) -> bool: ...
def check_unique_group_names(net: pandapowerNet, raise_: bool = False) -> None: ...
def remove_not_existing_group_members(net: pandapowerNet, verbose: bool = True) -> None: ...
def ensure_lists_in_group_element_column(net: pandapowerNet, drop_empty_lines: bool = True) -> None: ...
def group_entries_exist_in_element_table(net: pandapowerNet, index: int, element_type: str) -> NDArray[bool_]: ...
def set_group_in_service(net: pandapowerNet, index: int) -> None: ...
def set_group_out_of_service(net: pandapowerNet, index: int) -> None: ...
def set_value_to_group(
    net: pandapowerNet, index: int, value: object, column: str, replace: bool = True, append_column: bool = True
) -> None: ...
def group_res_p_mw(net: pandapowerNet, index: int) -> float | Incomplete: ...
def group_res_q_mvar(net: pandapowerNet, index: int) -> float | Incomplete: ...
def set_group_reference_column(
    net: pandapowerNet, index: int, reference_column: str, element_type: str | None = None
) -> None: ...
def return_group_as_net(
    net: pandapowerNet, index: int, keep_everything_else: bool = False, verbose: bool = True, **kwargs: Incomplete
) -> pandapowerNet: ...
def elements_connected_to_group(
    net: pandapowerNet,
    index: int,
    element_types: Iterable[str],
    find_buses_only_from_buses: bool = False,
    respect_switches: bool = True,
    respect_in_service: bool = False,
    include_empty_lists: bool = False,
) -> dict[str, Index]: ...
