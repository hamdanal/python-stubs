from _typeshed import Incomplete
from collections.abc import Iterable
from typing import Literal

from graph_tool import Graph

class GraphToolInterface(Graph):
    pp_buses: set[int]
    def __init__(
        self,
        bus_indices: Iterable[int],
        g: Incomplete | None = None,
        directed: bool = False,
        prune: bool = False,
        vorder: Incomplete | None = None,
    ) -> None: ...
    def add_nodes_from(self, nodes: int | Iterable[int]) -> None: ...
    def add_node(self, node: int) -> None: ...
    def remove_node(self, node: int, fast: bool = False) -> None: ...
    def remove_nodes(self, nodes: int | Iterable[int]): ...
    def nodes(self) -> set[int]: ...
    def add_edge_data(self, edge) -> None: ...
    def get_edge_data(self, source, target, key: Incomplete | None = None): ...
    def add_edge(self, source, target, add_missing: bool = True, **kwargs) -> None: ...
    def is_multigraph(self) -> Literal[True]: ...
