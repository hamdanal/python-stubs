from _typeshed import Incomplete

home: Incomplete
desktop: Incomplete

def add_ext_grids_to_boundaries(
    net,
    boundary_buses,
    adapt_va_degree: bool = False,
    runpp_fct=...,
    calc_volt_angles: bool = True,
    allow_net_change_for_convergence: bool = False,
) -> None: ...
def drop_internal_branch_elements(net, internal_buses, branch_elements: Incomplete | None = None) -> None: ...
def calc_zpbn_parameters(net, boundary_buses, all_external_buses, slack_as: str = "gen", existing_shift_degree: bool = False): ...
def check_validity_of_Ybus_eq(net_zpbn, Ybus_eq, bus_lookups): ...
def drop_assist_elms_by_creating_ext_net(net, elms: Incomplete | None = None) -> None: ...
def build_ppc_and_Ybus(net) -> None: ...
def drop_measurements_and_controller(net, buses, skip_controller: bool = ...) -> None: ...
def match_controller_and_new_elements(net, net_org) -> None: ...
def ensure_origin_id(net, no_start: int = 0, elms: Incomplete | None = None) -> None: ...
def drop_and_edit_cost_functions(net, buses, drop_cost, add_origin_id, check_unique_elms_name: bool = True) -> None: ...
def match_cost_functions_and_eq_net(net, boundary_buses, eq_type) -> None: ...
def check_network(net) -> None: ...
def get_boundary_vp(net_eq, bus_lookups): ...
def adaptation_phase_shifter(net, v_boundary, p_boundary): ...
def replace_motor_by_load(net, all_external_buses) -> None: ...
