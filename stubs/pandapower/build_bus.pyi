from _typeshed import Incomplete
from typing import TypeVar

_T = TypeVar("_T")

def ds_find(ar, bus): ...
def ds_union(ar, bus1, bus2, bus_is_pv) -> None: ...
def ds_create(ar, switch_bus, switch_elm, switch_et_bus, switch_closed, switch_z_ohm, bus_is_pv, bus_in_service) -> None: ...
def fill_bus_lookup(ar, bus_lookup, bus_index) -> None: ...
def create_bus_lookup_numba(net, bus_index, bus_is_idx, gen_is_mask, eg_is_mask): ...

class DisjointSet(dict[_T, _T]):
    def add(self, item: _T) -> None: ...
    def find(self, item: _T) -> _T: ...
    def union(self, item1: _T, item2: _T) -> None: ...

def create_consecutive_bus_lookup(net, bus_index): ...
def create_bus_lookup_numpy(net, bus_index, bus_is_idx, gen_is_mask, eg_is_mask, closed_bb_switch_mask): ...
def create_bus_lookup(net, bus_index, bus_is_idx, gen_is_mask, eg_is_mask, numba): ...
def get_voltage_init_vector(net, init_v, mode, sequence: Incomplete | None = ...): ...
def set_reference_buses(net, ppc, bus_lookup, mode) -> None: ...
