import os
from _typeshed import Incomplete
from typing import IO, Any, Literal, overload
from typing_extensions import Self

import pandas as pd
from pyproj import CRS

from .array import GeometryArray, GeometryDtype
from .base import GeoPandasBase, _ConvertibleToCRS
from .explore import _explore_geoseries
from .plotting import plot_series

class GeoSeries(GeoPandasBase, pd.Series[GeometryDtype]):  # type: ignore[misc]
    crs: CRS
    def __init__(
        self, data: Incomplete | None = None, index: Incomplete | None = None, crs: _ConvertibleToCRS | None = None, **kwargs
    ) -> None: ...
    @property
    def values(self) -> GeometryArray: ...
    def append(self, *args, **kwargs) -> GeoSeries: ...
    @property
    def geometry(self) -> Self: ...
    @property
    def x(self) -> pd.Series[float]: ...
    @property
    def y(self) -> pd.Series[float]: ...
    @property
    def z(self) -> pd.Series[float]: ...
    @classmethod
    def from_file(cls, filename: str | os.PathLike[str] | IO[Incomplete], **kwargs) -> GeoSeries: ...
    @classmethod
    def from_wkb(cls, data, index: Incomplete | None = None, crs: _ConvertibleToCRS | None = None, **kwargs) -> Self: ...
    @classmethod
    def from_wkt(cls, data, index: Incomplete | None = None, crs: _ConvertibleToCRS | None = None, **kwargs) -> Self: ...
    @classmethod
    def from_xy(
        cls, x, y, z: Incomplete | None = None, index: Incomplete | None = None, crs: _ConvertibleToCRS | None = None, **kwargs
    ) -> Self: ...
    @property
    def __geo_interface__(self) -> dict[str, Any]: ...
    def to_file(
        self, filename: str | os.PathLike[str] | IO[Incomplete], driver: str | None = None, index: bool | None = None, **kwargs
    ) -> None: ...
    # def __getitem__(self, key): ...
    # def sort_index(self, *args, **kwargs): ...
    # def take(self, *args, **kwargs): ...
    # def select(self, *args, **kwargs): ...
    def apply(self, func, convert_dtype: bool | None = None, args=(), **kwargs): ...  # type: ignore[override]
    def isna(self) -> pd.Series[bool]: ...
    def isnull(self) -> pd.Series[bool]: ...
    def notna(self) -> pd.Series[bool]: ...
    def notnull(self) -> pd.Series[bool]: ...
    # def fillna(self, value: Incomplete | None = None, method: Incomplete | None = None, inplace: bool = ..., **kwargs): ...
    def __contains__(self, other) -> bool: ...
    plot = plot_series  # type: ignore[assignment] # pyright: ignore
    explore = _explore_geoseries
    def explode(self, ignore_index: bool = False, index_parts: bool | None = None) -> GeoSeries: ...
    def set_crs(
        self, crs: _ConvertibleToCRS | None = None, epsg: int | None = None, inplace: bool = False, allow_override: bool = False
    ) -> Self: ...
    def to_crs(self, crs: _ConvertibleToCRS | None = None, epsg: int | None = None) -> GeoSeries: ...
    def estimate_utm_crs(self, datum_name: str = "WGS 84") -> CRS: ...
    def to_json(self, **kwargs) -> str: ...  # type: ignore[override]
    @overload
    def to_wkb(self, hex: Literal[False] = False, **kwargs) -> pd.Series[bytes]: ...
    @overload
    def to_wkb(self, hex: Literal[True], **kwargs) -> pd.Series[str]: ...
    @overload
    def to_wkb(self, hex: bool = False, **kwargs) -> pd.Series[str] | pd.Series[bytes]: ...
    def to_wkt(self, **kwargs) -> pd.Series[str]: ...
    __xor__ = GeoPandasBase.symmetric_difference  # type: ignore[assignment] # pyright: ignore # deprecated
    __or__ = GeoPandasBase.union  # type: ignore[assignment] # pyright: ignore # deprecated
    __and__ = GeoPandasBase.intersection  # type: ignore[assignment] # pyright: ignore # deprecated
    __sub__ = GeoPandasBase.difference  # type: ignore[assignment] # pyright: ignore # deprecated
    def clip(self, mask, keep_geom_type: bool = False) -> GeoSeries: ...  # type: ignore[override]
