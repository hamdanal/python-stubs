from _typeshed import Incomplete
from collections.abc import Callable

from pandapower import ppException
from pandapower.auxiliary import pandapowerNet

class ControllerNotConverged(ppException): ...
class NetCalculationNotConverged(ppException): ...

def get_controller_order(nets, controller): ...
def check_for_initial_run(controller_order): ...
def ctrl_variables_default(net: pandapowerNet, **kwargs) -> dict[str, Incomplete]: ...
def prepare_run_ctrl(
    net: pandapowerNet, ctrl_variables: dict[str, Incomplete], **kwargs: Incomplete
) -> dict[str, Incomplete]: ...
def check_final_convergence(run_count: int, max_iter: int, net_converged: bool) -> None: ...
def get_recycle(ctrl_variables: dict[str, Incomplete] | None) -> tuple[Incomplete, bool]: ...
def net_initialization(
    net: pandapowerNet, ctrl_variables: dict[str, Incomplete], **kwargs: Incomplete
) -> dict[str, Incomplete]: ...
def control_initialization(controller_order: Incomplete) -> None: ...
def control_implementation(
    net: pandapowerNet,
    controller_order: Incomplete,
    ctrl_variables: dict[str, Incomplete],
    max_iter: int,
    evaluate_net_fct: Callable[..., dict[str, Incomplete]] = ...,
    **kwargs: Incomplete,
) -> None: ...
def control_finalization(controller_order: Incomplete) -> None: ...
def run_control(
    net: pandapowerNet, ctrl_variables: dict[str, Incomplete] | None = None, max_iter: int = 30, **kwargs: Incomplete
) -> None: ...
