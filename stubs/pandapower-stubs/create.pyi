from collections.abc import Collection, Mapping
from typing import Any, Literal
from typing_extensions import TypeAlias

import numpy as np
import pandas as pd
from numpy.typing import DTypeLike

from pandapower._typing import Array1D, Bool, Float, Int, ScalarOrVector
from pandapower.auxiliary import pandapowerNet

_CostElementType: TypeAlias = Literal["gen", "sgen", "ext_grid", "load", "dcline", "storage"]
_SGenGeneratorType: TypeAlias = Literal["current_source", "async", "async_doubly_fed"]

def create_empty_network(name: str = "", f_hz: Float = 50.0, sn_mva: Float = 1, add_stdtypes: Bool = True) -> pandapowerNet: ...
def create_bus(
    net: pandapowerNet,
    vn_kv: Float,
    name: str | None = None,
    index: Int | None = None,
    geodata: tuple[Float, Float] | None = None,
    type: Literal["b", "m", "n"] = "b",
    zone: str | None = None,
    in_service: Bool = True,
    max_vm_pu: Float = ...,
    min_vm_pu: Float = ...,
    coords: Collection[tuple[Float, Float]] | None = None,
    **kwargs,
) -> np.int64: ...
def create_bus_dc(
    net: pandapowerNet,
    vn_kv: Float,
    name: str | None = None,
    index: Int | None = None,
    geodata: tuple[Float, Float] | None = None,
    type: Literal["b", "m", "n"] = "b",
    zone: str | None = None,
    in_service: Bool | None = True,
    max_vm_pu: Float = ...,
    min_vm_pu: Float = ...,
    coords: Collection[tuple[Float, Float]] | None = None,
    **kwargs,
) -> np.int64: ...
def create_buses(
    net: pandapowerNet,
    nr_buses: Int,
    vn_kv: ScalarOrVector[Float],
    index: ScalarOrVector[Int] | None = None,
    name: ScalarOrVector[str] | None = None,
    type: ScalarOrVector[Literal["b", "m", "n"]] = "b",
    geodata: ScalarOrVector[tuple[Float, Float]] | None = None,
    zone: ScalarOrVector[str] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    max_vm_pu: ScalarOrVector[Float] = ...,
    min_vm_pu: ScalarOrVector[Float] = ...,
    coords: ScalarOrVector[Collection[tuple[Float, Float]]] | None = None,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_buses_dc(
    net: pandapowerNet,
    nr_buses_dc: Int,
    vn_kv: ScalarOrVector[Float],
    index: ScalarOrVector[Int] | None = None,
    name: ScalarOrVector[str] | None = None,
    type: ScalarOrVector[Literal["b", "m", "n"]] = "b",
    geodata: ScalarOrVector[tuple[Float, Float]] | None = None,
    zone: ScalarOrVector[str] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    max_vm_pu: ScalarOrVector[Float] = ...,
    min_vm_pu: ScalarOrVector[Float] = ...,
    coords: ScalarOrVector[Collection[tuple[Float, Float]]] | None = None,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_load(
    net: pandapowerNet,
    bus: Int,
    p_mw: Float,
    q_mvar: Float = 0,
    const_z_percent: Float = 0,
    const_i_percent: Float = 0,
    sn_mva: Float = ...,
    name: str | None = None,
    scaling: Float = 1.0,
    index: Int | None = None,
    in_service: Bool = True,
    type: Literal["wye", "delta"] = "wye",
    max_p_mw: Float = ...,
    min_p_mw: Float = ...,
    max_q_mvar: Float = ...,
    min_q_mvar: Float = ...,
    controllable: Bool | float = ...,  # float because default value is nan
    **kwargs,
) -> np.int64: ...
def create_loads(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: ScalarOrVector[Float],
    q_mvar: ScalarOrVector[Float] = 0,
    const_z_percent: ScalarOrVector[Float] = 0,
    const_i_percent: ScalarOrVector[Float] = 0,
    sn_mva: ScalarOrVector[Float] = ...,
    name: ScalarOrVector[str] | None = None,
    scaling: ScalarOrVector[Float] = 1.0,
    index: Collection[Int] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    type: ScalarOrVector[Literal["wye", "delta"]] | None = "wye",
    max_p_mw: ScalarOrVector[Float] = ...,
    min_p_mw: ScalarOrVector[Float] = ...,
    max_q_mvar: ScalarOrVector[Float] = ...,
    min_q_mvar: ScalarOrVector[Float] = ...,
    controllable: ScalarOrVector[Bool] | float = ...,  # float because default value is nan
    **kwargs,
) -> Array1D[np.int64]: ...
def create_asymmetric_load(
    net: pandapowerNet,
    bus: Int,
    p_a_mw: Float = 0,
    p_b_mw: Float = 0,
    p_c_mw: Float = 0,
    q_a_mvar: Float = 0,
    q_b_mvar: Float = 0,
    q_c_mvar: Float = 0,
    sn_mva: Float = ...,
    name: str | None = None,
    scaling: Float = 1.0,
    index: Int | None = None,
    in_service: Bool = True,
    type: Literal["wye", "delta"] = "wye",
    **kwargs,
) -> np.int64: ...
def create_load_from_cosphi(
    net: pandapowerNet, bus: Int, sn_mva: Float, cos_phi: Float, mode: Literal["underexcited", "overexcited"], **kwargs
) -> np.int64: ...
def create_sgen(
    net: pandapowerNet,
    bus: Int,
    p_mw: Float,
    q_mvar: Float = 0,
    sn_mva: Float = ...,
    name: str | None = None,
    index: Int | None = None,
    scaling: Float = 1.0,
    type: Literal["wye", "delta", "motor"] | None = "wye",
    in_service: Bool = True,
    max_p_mw: Float = ...,
    min_p_mw: Float = ...,
    max_q_mvar: Float = ...,
    min_q_mvar: Float = ...,
    controllable: Bool | float = ...,  # float because default value is nan
    k: Float = ...,
    rx: Float = ...,
    id_q_capability_curve_characteristic: Int | None = None,
    reactive_capability_curve: Bool = False,
    curve_style: str | None = None,
    current_source: Bool = True,
    generator_type: _SGenGeneratorType | None = None,
    max_ik_ka: Float = ...,
    kappa: Float = ...,
    lrc_pu: Float = ...,
    **kwargs,
) -> np.int64: ...
def create_sgens(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: ScalarOrVector[Float],
    q_mvar: ScalarOrVector[Float] = 0,
    sn_mva: ScalarOrVector[Float] = ...,
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    scaling: ScalarOrVector[Float] = 1.0,
    type: ScalarOrVector[Literal["wye", "delta", "motor"]] | None = "wye",
    in_service: ScalarOrVector[Bool] = True,
    max_p_mw: ScalarOrVector[Float] = ...,
    min_p_mw: ScalarOrVector[Float] = ...,
    max_q_mvar: ScalarOrVector[Float] = ...,
    min_q_mvar: ScalarOrVector[Float] = ...,
    controllable: ScalarOrVector[Bool] | float = ...,  # float because default value is nan
    k: ScalarOrVector[Float] = ...,
    rx: ScalarOrVector[Float] = ...,
    id_q_capability_curve_characteristic: ScalarOrVector[Int] | float | None = ...,  # float because default value is nan
    reactive_capability_curve: ScalarOrVector[Bool] = False,
    curve_style: ScalarOrVector[str] | None = None,
    current_source: ScalarOrVector[Bool] = True,
    generator_type: ScalarOrVector[_SGenGeneratorType] = "current_source",
    max_ik_ka: ScalarOrVector[Float] = ...,
    kappa: ScalarOrVector[Float] = ...,
    lrc_pu: ScalarOrVector[Float] = ...,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_asymmetric_sgen(
    net: pandapowerNet,
    bus: Int,
    p_a_mw: Float = 0,
    p_b_mw: Float = 0,
    p_c_mw: Float = 0,
    q_a_mvar: Float = 0,
    q_b_mvar: Float = 0,
    q_c_mvar: Float = 0,
    sn_mva: Float = ...,
    name: str | None = None,
    index: Int | None = None,
    scaling: Float = 1.0,
    type: Literal["wye", "delta"] = "wye",
    in_service: Bool = True,
    **kwargs,
) -> np.int64: ...
def create_sgen_from_cosphi(
    net: pandapowerNet, bus: Int, sn_mva: Float, cos_phi: Float, mode: Literal["underexcited", "overexcited"], **kwargs
) -> np.int64: ...
def create_storage(
    net: pandapowerNet,
    bus: Int,
    p_mw: Float,
    max_e_mwh: Float,
    q_mvar: Float = 0,
    sn_mva: Float = ...,
    soc_percent: Float = ...,
    min_e_mwh: Float = 0.0,
    name: str | None = None,
    index: Int | None = None,
    scaling: Float = 1.0,
    type: str | None = None,
    in_service: Bool = True,
    max_p_mw: Float = ...,
    min_p_mw: Float = ...,
    max_q_mvar: Float = ...,
    min_q_mvar: Float = ...,
    controllable: Bool | float = ...,  # float because default value is nan
    **kwargs,
) -> np.int64: ...
def create_storages(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: ScalarOrVector[Float],
    max_e_mwh: ScalarOrVector[Float],
    q_mvar: ScalarOrVector[Float] = 0,
    sn_mva: ScalarOrVector[Float] = ...,
    soc_percent: ScalarOrVector[Float] = ...,
    min_e_mwh: ScalarOrVector[Float] = 0.0,
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    scaling: ScalarOrVector[Float] = 1.0,
    type: ScalarOrVector[str] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    max_p_mw: ScalarOrVector[Float] = ...,
    min_p_mw: ScalarOrVector[Float] = ...,
    max_q_mvar: ScalarOrVector[Float] = ...,
    min_q_mvar: ScalarOrVector[Float] = ...,
    controllable: ScalarOrVector[Bool] | float = ...,  # float because default value is nan
    **kwargs,
) -> Array1D[np.int64]: ...
def create_gen(
    net: pandapowerNet,
    bus: Int,
    p_mw: Float,
    vm_pu: Float = 1.0,
    sn_mva: Float = ...,
    name: str | None = None,
    index: Int | None = None,
    max_q_mvar: Float = ...,
    min_q_mvar: Float = ...,
    min_p_mw: Float = ...,
    max_p_mw: Float = ...,
    min_vm_pu: Float = ...,
    max_vm_pu: Float = ...,
    scaling: Float = 1.0,
    type: str | None = None,
    slack: Bool = False,
    id_q_capability_curve_characteristic: Int | None = None,
    reactive_capability_curve: Bool = False,
    curve_style: str | None = None,
    controllable: Bool | float = ...,  # float because default value is nan
    vn_kv: Float = ...,
    xdss_pu: Float = ...,
    rdss_ohm: Float = ...,
    cos_phi: Float = ...,
    pg_percent: Float = ...,
    power_station_trafo: Int | float = ...,  # float because default value is nan
    in_service: Bool = True,
    slack_weight: Float = 0.0,
    **kwargs,
) -> np.int64: ...
def create_gens(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: ScalarOrVector[Float],
    vm_pu: ScalarOrVector[Float] = 1.0,
    sn_mva: ScalarOrVector[Float] = ...,
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    max_q_mvar: ScalarOrVector[Float] = ...,
    min_q_mvar: ScalarOrVector[Float] = ...,
    min_p_mw: ScalarOrVector[Float] = ...,
    max_p_mw: ScalarOrVector[Float] = ...,
    min_vm_pu: ScalarOrVector[Float] = ...,
    max_vm_pu: ScalarOrVector[Float] = ...,
    scaling: ScalarOrVector[Float] = 1.0,
    type: ScalarOrVector[str] | None = None,
    slack: ScalarOrVector[Bool] = False,
    id_q_capability_curve_characteristic: ScalarOrVector[Int] | None | float = ...,  # float because default value is nan
    reactive_capability_curve: ScalarOrVector[Bool] = False,
    curve_style: ScalarOrVector[str] | None = None,
    controllable: ScalarOrVector[Bool] | float = ...,  # float because default value is nan
    vn_kv: ScalarOrVector[Float] = ...,
    xdss_pu: ScalarOrVector[Float] = ...,
    rdss_ohm: ScalarOrVector[Float] = ...,
    cos_phi: ScalarOrVector[Float] = ...,
    pg_percent: ScalarOrVector[Float] = ...,
    power_station_trafo: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    in_service: ScalarOrVector[Bool] = True,
    slack_weight: ScalarOrVector[Float] = 0.0,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_motor(
    net: pandapowerNet,
    bus: Int,
    pn_mech_mw: Float,
    cos_phi: Float,
    efficiency_percent: Float = 100.0,
    loading_percent: Float = 100.0,
    name: str | None = None,
    lrc_pu: Float = ...,
    scaling: Float = 1.0,
    vn_kv: Float = ...,
    rx: Float = ...,
    index: Int | None = None,
    in_service: Bool = True,
    cos_phi_n: Float = ...,
    efficiency_n_percent: Float = ...,
    **kwargs,
) -> np.int64: ...
def create_ext_grid(
    net: pandapowerNet,
    bus: Int,
    vm_pu: Float = 1.0,
    va_degree: Float = 0.0,
    name: str | None = None,
    in_service: Bool = True,
    s_sc_max_mva: Float = ...,
    s_sc_min_mva: Float = ...,
    rx_max: Float = ...,
    rx_min: Float = ...,
    max_p_mw: Float = ...,
    min_p_mw: Float = ...,
    max_q_mvar: Float = ...,
    min_q_mvar: Float = ...,
    index: Int | None = None,
    r0x0_max: Float = ...,
    x0x_max: Float = ...,
    controllable: Bool | float = ...,  # float because default value is nan
    slack_weight: Float = 1.0,
    **kwargs,
) -> np.int64: ...
def create_line(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    length_km: Float,
    std_type: str,
    name: str | None = None,
    index: Int | None = None,
    geodata: Collection[tuple[Float, Float]] | None = None,
    df: Float = 1.0,
    parallel: Int = 1,
    in_service: Bool = True,
    max_loading_percent: Float = ...,
    alpha: Float = ...,
    temperature_degree_celsius: Float = ...,
    **kwargs,
) -> np.int64: ...
def create_line_dc(
    net: pandapowerNet,
    from_bus_dc: Int,
    to_bus_dc: Int,
    length_km: Float,
    std_type: str,
    name: str | None = None,
    index: Int | None = None,
    geodata: Collection[tuple[Float, Float]] | None = None,
    df: Float = 1.0,
    parallel: Int = 1,
    in_service: Bool = True,
    max_loading_percent: Float = ...,
    alpha: Float = ...,
    temperature_degree_celsius: Float = ...,
    **kwargs,
) -> np.int64: ...
def create_lines(
    net: pandapowerNet,
    from_buses: Collection[Int],
    to_buses: Collection[Int],
    length_km: ScalarOrVector[Float],
    std_type: ScalarOrVector[str],
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    geodata: ScalarOrVector[Collection[tuple[Float, Float]]] | None = None,
    df: ScalarOrVector[Float] = 1.0,
    parallel: ScalarOrVector[Int] = 1,
    in_service: ScalarOrVector[Bool] = True,
    max_loading_percent: ScalarOrVector[Float] = ...,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_lines_dc(
    net: pandapowerNet,
    from_buses_dc: Collection[Int],
    to_buses_dc: Collection[Int],
    length_km: ScalarOrVector[Float],
    std_type: ScalarOrVector[str],
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    geodata: ScalarOrVector[Collection[tuple[Float, Float]]] | None = None,
    df: ScalarOrVector[Float] = 1.0,
    parallel: ScalarOrVector[Int] = 1,
    in_service: ScalarOrVector[Bool] = True,
    max_loading_percent: ScalarOrVector[Float] = ...,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_line_from_parameters(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    length_km: Float,
    r_ohm_per_km: Float,
    x_ohm_per_km: Float,
    c_nf_per_km: Float,
    max_i_ka: Float,
    name: str | None = None,
    index: Int | None = None,
    type: Literal["ol", "cs"] | None = None,
    geodata: Collection[tuple[Float, Float]] | None = None,
    in_service: Bool = True,
    df: Float = 1.0,
    parallel: Int = 1,
    g_us_per_km: Float = 0.0,
    max_loading_percent: Float = ...,
    alpha: Float = ...,
    temperature_degree_celsius: Float = ...,
    r0_ohm_per_km: Float = ...,
    x0_ohm_per_km: Float = ...,
    c0_nf_per_km: Float = ...,
    g0_us_per_km: Float = 0,
    endtemp_degree: Float = ...,
    **kwargs,
) -> np.int64: ...
def create_line_dc_from_parameters(
    net: pandapowerNet,
    from_bus_dc: Int,
    to_bus_dc: Int,
    length_km: Float,
    r_ohm_per_km: Float,
    max_i_ka: Float,
    name: str | None = None,
    index: Int | None = None,
    type: Literal["ol", "cs"] | None = None,
    geodata: Collection[tuple[Float, Float]] | None = None,
    in_service: Bool = True,
    df: Float = 1.0,
    parallel: Int = 1,
    max_loading_percent: Float = ...,
    alpha: Float = ...,
    temperature_degree_celsius: Float = ...,
    g_us_per_km: Float = 0.0,
    **kwargs,
) -> np.int64: ...
def create_lines_from_parameters(
    net: pandapowerNet,
    from_buses: Collection[Int],
    to_buses: Collection[Int],
    length_km: ScalarOrVector[Float],
    r_ohm_per_km: ScalarOrVector[Float],
    x_ohm_per_km: ScalarOrVector[Float],
    c_nf_per_km: ScalarOrVector[Float],
    max_i_ka: ScalarOrVector[Float],
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    type: ScalarOrVector[Literal["ol", "cs"]] | None = None,
    geodata: ScalarOrVector[Collection[tuple[Float, Float]]] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    df: ScalarOrVector[Float] = 1.0,
    parallel: ScalarOrVector[Int] = 1,
    g_us_per_km: ScalarOrVector[Float] = 0.0,
    max_loading_percent: ScalarOrVector[Float] = ...,
    alpha: ScalarOrVector[Float] = ...,
    temperature_degree_celsius: ScalarOrVector[Float] = ...,
    r0_ohm_per_km: ScalarOrVector[Float] = ...,
    x0_ohm_per_km: ScalarOrVector[Float] = ...,
    c0_nf_per_km: ScalarOrVector[Float] = ...,
    g0_us_per_km: ScalarOrVector[Float] = ...,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_lines_dc_from_parameters(
    net: pandapowerNet,
    from_buses_dc: Collection[Int],
    to_buses_dc: Collection[Int],
    length_km: ScalarOrVector[Float],
    r_ohm_per_km: ScalarOrVector[Float],
    max_i_ka: ScalarOrVector[Float],
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    type: ScalarOrVector[Literal["ol", "cs"]] | None = None,
    geodata: ScalarOrVector[Collection[tuple[Float, Float]]] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    df: ScalarOrVector[Float] = 1.0,
    parallel: ScalarOrVector[Int] = 1,
    g_us_per_km: ScalarOrVector[Float] = 0.0,
    max_loading_percent: ScalarOrVector[Float] = ...,
    alpha: ScalarOrVector[Float] = ...,
    temperature_degree_celsius: ScalarOrVector[Float] = ...,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_transformer(
    net: pandapowerNet,
    hv_bus: Int,
    lv_bus: Int,
    std_type: str,
    name: str | None = None,
    tap_pos: Int | float = ...,  # float because default value is nan
    in_service: Bool = True,
    index: Int | None = None,
    max_loading_percent: Float = ...,
    parallel: Int = 1,
    df: Float = 1.0,
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    tap_dependency_table: Bool | float = ...,  # float because default value is nan
    id_characteristic_table: Int | float = ...,  # float because default value is nan
    pt_percent: Float = ...,
    oltc: Bool | float = ...,  # float because default value is nan
    xn_ohm: Float = ...,
    tap2_pos: Int | float = ...,  # float because default value is nan
    **kwargs,
) -> np.int64: ...
def create_transformer_from_parameters(
    net: pandapowerNet,
    hv_bus: Int,
    lv_bus: Int,
    sn_mva: Float,
    vn_hv_kv: Float,
    vn_lv_kv: Float,
    vkr_percent: Float,
    vk_percent: Float,
    pfe_kw: Float,
    i0_percent: Float,
    shift_degree: Float = 0,
    tap_side: Literal["hv", "lv"] | None = None,
    tap_neutral: Int | float = ...,  # float because default value is nan
    tap_max: Int | float = ...,  # float because default value is nan
    tap_min: Int | float = ...,  # float because default value is nan
    tap_step_percent: Float = ...,
    tap_step_degree: Float = ...,
    tap_pos: Int | float = ...,  # float because default value is nan
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    id_characteristic_table: Int | float = ...,  # float because default value is nan
    in_service: Bool = True,
    name: str | None = None,
    vector_group: str | None = None,
    index: Int | None = None,
    max_loading_percent: Float = ...,
    parallel: Int = 1,
    df: Float = 1.0,
    vk0_percent: Float = ...,
    vkr0_percent: Float = ...,
    mag0_percent: Float = ...,
    mag0_rx: Float = ...,
    si0_hv_partial: Float = ...,
    pt_percent: Float = ...,
    oltc: Bool | float = ...,  # float because default value is nan
    tap_dependency_table: Bool = False,
    xn_ohm: Float = ...,
    tap2_side: Literal["hv", "lv"] | None = None,
    tap2_neutral: Int | float = ...,  # float because default value is nan
    tap2_max: Int | float = ...,  # float because default value is nan
    tap2_min: Int | float = ...,  # float because default value is nan
    tap2_step_percent: Float = ...,
    tap2_step_degree: Float = ...,
    tap2_pos: Int | float = ...,  # float because default value is nan
    tap2_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    **kwargs,
) -> np.int64: ...
def create_transformers_from_parameters(
    net: pandapowerNet,
    hv_buses: Collection[Int],
    lv_buses: Collection[Int],
    sn_mva: ScalarOrVector[Float],
    vn_hv_kv: ScalarOrVector[Float],
    vn_lv_kv: ScalarOrVector[Float],
    vkr_percent: ScalarOrVector[Float],
    vk_percent: ScalarOrVector[Float],
    pfe_kw: ScalarOrVector[Float],
    i0_percent: ScalarOrVector[Float],
    shift_degree: ScalarOrVector[Float] = 0,
    tap_side: ScalarOrVector[Literal["hv", "lv"]] | None = None,
    tap_neutral: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_max: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_min: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_step_percent: ScalarOrVector[Float] = ...,
    tap_step_degree: ScalarOrVector[Float] = ...,
    tap_pos: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_changer_type: ScalarOrVector[Literal["Ratio", "Symmetrical", "Ideal", "Tabular"]] | None = None,
    id_characteristic_table: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    in_service: ScalarOrVector[Bool] = True,
    name: ScalarOrVector[str] | None = None,
    vector_group: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    max_loading_percent: ScalarOrVector[Float] = ...,
    parallel: ScalarOrVector[Int] = 1,
    df: ScalarOrVector[Float] = 1.0,
    vk0_percent: ScalarOrVector[Float] = ...,
    vkr0_percent: ScalarOrVector[Float] = ...,
    mag0_percent: ScalarOrVector[Float] = ...,
    mag0_rx: ScalarOrVector[Float] = ...,
    si0_hv_partial: ScalarOrVector[Float] = ...,
    pt_percent: ScalarOrVector[Float] = ...,
    oltc: ScalarOrVector[Bool] | float = ...,  # float because default value is nan
    tap_dependency_table: ScalarOrVector[Bool] = False,
    xn_ohm: ScalarOrVector[Float] = ...,
    tap2_side: ScalarOrVector[Literal["hv", "lv"]] | None = None,
    tap2_neutral: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap2_max: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap2_min: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap2_step_percent: ScalarOrVector[Float] = ...,
    tap2_step_degree: ScalarOrVector[Float] = ...,
    tap2_pos: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap2_changer_type: ScalarOrVector[Literal["Ratio", "Symmetrical", "Ideal", "Tabular"]] | None = None,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_transformer3w(
    net: pandapowerNet,
    hv_bus: Int,
    mv_bus: Int,
    lv_bus: Int,
    std_type: str,
    name: str | None = None,
    tap_pos: Int | float = ...,  # float because default value is nan
    in_service: Bool = True,
    index: Int | None = None,
    max_loading_percent: Float = ...,
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    tap_at_star_point: Bool = False,
    tap_dependency_table: Bool | float = ...,  # float because default value is nan
    id_characteristic_table: Int | float = ...,  # float because default value is nan
    **kwargs,
) -> np.int64: ...
def create_transformer3w_from_parameters(
    net: pandapowerNet,
    hv_bus: Int,
    mv_bus: Int,
    lv_bus: Int,
    vn_hv_kv: Float,
    vn_mv_kv: Float,
    vn_lv_kv: Float,
    sn_hv_mva: Float,
    sn_mv_mva: Float,
    sn_lv_mva: Float,
    vk_hv_percent: Float,
    vk_mv_percent: Float,
    vk_lv_percent: Float,
    vkr_hv_percent: Float,
    vkr_mv_percent: Float,
    vkr_lv_percent: Float,
    pfe_kw: Float,
    i0_percent: Float,
    shift_mv_degree: Float = 0.0,
    shift_lv_degree: Float = 0.0,
    tap_side: Literal["hv", "mv", "lv"] | None = None,
    tap_step_percent: Float = ...,
    tap_step_degree: Float = ...,
    tap_pos: Int | float = ...,  # float because default value is nan
    tap_neutral: Int | float = ...,  # float because default value is nan
    tap_max: Int | float = ...,  # float because default value is nan
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    tap_min: Int | float = ...,  # float because default value is nan
    name: str | None = None,
    in_service: Bool = True,
    index: Int | None = None,
    max_loading_percent: Float = ...,
    tap_at_star_point: Bool = False,
    vk0_hv_percent: Float = ...,
    vk0_mv_percent: Float = ...,
    vk0_lv_percent: Float = ...,
    vkr0_hv_percent: Float = ...,
    vkr0_mv_percent: Float = ...,
    vkr0_lv_percent: Float = ...,
    vector_group: str | None = None,
    tap_dependency_table: Bool = False,
    id_characteristic_table: Int | float = ...,  # float because default value is nan
    **kwargs,
) -> np.int64: ...
def create_transformers3w_from_parameters(
    net: pandapowerNet,
    hv_buses: Collection[Int],
    mv_buses: Collection[Int],
    lv_buses: Collection[Int],
    vn_hv_kv: ScalarOrVector[Float],
    vn_mv_kv: ScalarOrVector[Float],
    vn_lv_kv: ScalarOrVector[Float],
    sn_hv_mva: ScalarOrVector[Float],
    sn_mv_mva: ScalarOrVector[Float],
    sn_lv_mva: ScalarOrVector[Float],
    vk_hv_percent: ScalarOrVector[Float],
    vk_mv_percent: ScalarOrVector[Float],
    vk_lv_percent: ScalarOrVector[Float],
    vkr_hv_percent: ScalarOrVector[Float],
    vkr_mv_percent: ScalarOrVector[Float],
    vkr_lv_percent: ScalarOrVector[Float],
    pfe_kw: ScalarOrVector[Float],
    i0_percent: ScalarOrVector[Float],
    shift_mv_degree: ScalarOrVector[Float] = 0.0,
    shift_lv_degree: ScalarOrVector[Float] = 0.0,
    tap_side: ScalarOrVector[Literal["hv", "mv", "lv"]] | None = None,
    tap_step_percent: ScalarOrVector[Float] = ...,
    tap_step_degree: ScalarOrVector[Float] = ...,
    tap_pos: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_neutral: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_max: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    tap_min: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    name: ScalarOrVector[str] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    index: Collection[Int] | None = None,
    max_loading_percent: ScalarOrVector[Float] = ...,
    tap_at_star_point: ScalarOrVector[Bool] = False,
    tap_changer_type: ScalarOrVector[Literal["Ratio", "Symmetrical", "Ideal", "Tabular"]] | None = None,
    vk0_hv_percent: ScalarOrVector[Float] = ...,
    vk0_mv_percent: ScalarOrVector[Float] = ...,
    vk0_lv_percent: ScalarOrVector[Float] = ...,
    vkr0_hv_percent: ScalarOrVector[Float] = ...,
    vkr0_mv_percent: ScalarOrVector[Float] = ...,
    vkr0_lv_percent: ScalarOrVector[Float] = ...,
    vector_group: ScalarOrVector[str] | None = None,
    tap_dependency_table: ScalarOrVector[Bool] = False,
    id_characteristic_table: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    **kwargs,
) -> Array1D[np.int64]: ...
def create_switch(
    net: pandapowerNet,
    bus: Int,
    element: Int,
    et: Literal["l", "t", "t3", "b"],
    closed: Bool = True,
    type: Literal["LS", "CB", "LBS", "DS"] | None = None,
    name: str | None = None,
    index: Int | None = None,
    z_ohm: Float = 0,
    in_ka: Float | None = ...,
    **kwargs,
) -> np.int64: ...
def create_switches(
    net: pandapowerNet,
    buses: Collection[Int],
    elements: Collection[Int],
    et: ScalarOrVector[Literal["l", "t", "t3", "b"]],
    closed: ScalarOrVector[Bool] = True,
    type: ScalarOrVector[Literal["LS", "CB", "LBS", "DS"]] | None = None,
    name: ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    z_ohm: ScalarOrVector[Float] = 0,
    in_ka: ScalarOrVector[Float] | None = ...,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_shunt(
    net: pandapowerNet,
    bus: Int,
    q_mvar: Float,
    p_mw: Float = 0.0,
    vn_kv: Float | None = None,
    step: Int = 1,
    max_step: Int = 1,
    name: str | None = None,
    step_dependency_table: Bool = False,
    id_characteristic_table: Int | float = ...,  # float because default value is nan
    in_service: Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_shunts(
    net: pandapowerNet,
    buses: Collection[Int],
    q_mvar: ScalarOrVector[Float],
    p_mw: ScalarOrVector[Float] = 0.0,
    vn_kv: ScalarOrVector[Float] | None = None,
    step: ScalarOrVector[Int] = 1,
    max_step: ScalarOrVector[Int] = 1,
    name: ScalarOrVector[str] | None = None,
    step_dependency_table: ScalarOrVector[Bool] = False,
    id_characteristic_table: ScalarOrVector[Int] | float = ...,  # float because default value is nan
    in_service: ScalarOrVector[Bool] = True,
    index: Collection[Int] | None = None,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_shunt_as_capacitor(
    net: pandapowerNet,
    bus: Int,
    q_mvar: Float,
    loss_factor: Float,
    *,
    # keywords passed to create_shunt extracted from **kwargs
    vn_kv: Float | None = None,
    step: Int = 1,
    max_step: Int = 1,
    name: str | None = None,
    step_dependency_table: Bool = False,
    id_characteristic_table: Int = ...,
    in_service: Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_svc(
    net: pandapowerNet,
    bus: Int,
    x_l_ohm: Float,
    x_cvar_ohm: Float,
    set_vm_pu: Float,
    thyristor_firing_angle_degree: Float,
    name: str | None = None,
    controllable: Bool = True,
    in_service: Bool = True,
    index: Int | None = None,
    min_angle_degree: Float = 90,
    max_angle_degree: Float = 180,
    **kwargs,
) -> np.int64: ...
def create_ssc(
    net: pandapowerNet,
    bus: Int,
    r_ohm: Float,
    x_ohm: Float,
    set_vm_pu: Float = 1.0,
    vm_internal_pu: Float = 1.0,
    va_internal_degree: Float = 0.0,
    name: str | None = None,
    controllable: Bool = True,
    in_service: Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_vsc(
    net: pandapowerNet,
    bus: Int,
    bus_dc: Int,
    r_ohm: Float,
    x_ohm: Float,
    r_dc_ohm: Float,
    pl_dc_mw: Float = 0.0,
    control_mode_ac: Literal["vm_pu", "q_mvar"] = "vm_pu",
    control_value_ac: Float = 1.0,
    control_mode_dc: Literal["vm_pu", "p_mw"] = "p_mw",
    control_value_dc: Float = 0.0,
    name: str | None = None,
    controllable: Bool = True,
    in_service: Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_impedance(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    rft_pu: Float,
    xft_pu: Float,
    sn_mva: Float,
    rtf_pu: Float | None = None,
    xtf_pu: Float | None = None,
    name: str | None = None,
    in_service: Bool = True,
    index: Int | None = None,
    rft0_pu: Float | None = None,
    xft0_pu: Float | None = None,
    rtf0_pu: Float | None = None,
    xtf0_pu: Float | None = None,
    gf_pu: Float = 0,
    bf_pu: Float = 0,
    gt_pu: Float | None = None,
    bt_pu: Float | None = None,
    gf0_pu: Float | None = None,
    bf0_pu: Float | None = None,
    gt0_pu: Float | None = None,
    bt0_pu: Float | None = None,
    **kwargs,
) -> np.int64: ...
def create_impedances(
    net: pandapowerNet,
    from_buses: Collection[Int],
    to_buses: Collection[Int],
    rft_pu: ScalarOrVector[Float],
    xft_pu: ScalarOrVector[Float],
    sn_mva: ScalarOrVector[Float],
    rtf_pu: ScalarOrVector[Float] | None = None,
    xtf_pu: ScalarOrVector[Float] | None = None,
    name: ScalarOrVector[str] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    index: Collection[Int] | None = None,
    rft0_pu: ScalarOrVector[Float] | None = None,
    xft0_pu: ScalarOrVector[Float] | None = None,
    rtf0_pu: ScalarOrVector[Float] | None = None,
    xtf0_pu: ScalarOrVector[Float] | None = None,
    gf_pu: ScalarOrVector[Float] = 0,
    bf_pu: ScalarOrVector[Float] = 0,
    gt_pu: ScalarOrVector[Float] | None = None,
    bt_pu: ScalarOrVector[Float] | None = None,
    gf0_pu: ScalarOrVector[Float] | None = None,
    bf0_pu: ScalarOrVector[Float] | None = None,
    gt0_pu: ScalarOrVector[Float] | None = None,
    bt0_pu: ScalarOrVector[Float] | None = None,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_tcsc(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    x_l_ohm: Float,
    x_cvar_ohm: Float,
    set_p_to_mw: Float,
    thyristor_firing_angle_degree: Float,
    name: str | None = None,
    controllable: Bool = True,
    in_service: Bool = True,
    index: Int | None = None,
    min_angle_degree: Float = 90,
    max_angle_degree: Float = 180,
    **kwargs,
) -> np.int64: ...
def create_series_reactor_as_impedance(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    r_ohm: Float,
    x_ohm: Float,
    sn_mva: Float,
    name: str | None = None,
    in_service: Bool = True,
    index: Int | None = None,
    r0_ohm: Float | None = None,
    x0_ohm: Float | None = None,
    **kwargs,
) -> np.int64: ...
def create_ward(
    net: pandapowerNet,
    bus: Int,
    ps_mw: Float,
    qs_mvar: Float,
    pz_mw: Float,
    qz_mvar: Float,
    name: str | None = None,
    in_service: Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_wards(
    net: pandapowerNet,
    buses: Collection[Int],
    ps_mw: ScalarOrVector[Float],
    qs_mvar: ScalarOrVector[Float],
    pz_mw: ScalarOrVector[Float],
    qz_mvar: ScalarOrVector[Float],
    name: ScalarOrVector[str] | None = None,
    in_service: ScalarOrVector[Bool] = True,
    index: Collection[Int] | None = None,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_xward(
    net: pandapowerNet,
    bus: Int,
    ps_mw: Float,
    qs_mvar: Float,
    pz_mw: Float,
    qz_mvar: Float,
    r_ohm: Float,
    x_ohm: Float,
    vm_pu: Float,
    in_service: Bool = True,
    name: str | None = None,
    index: Int | None = None,
    slack_weight: Float = 0.0,
    **kwargs,
) -> np.int64: ...
def create_dcline(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    p_mw: Float,
    loss_percent: Float,
    loss_mw: Float,
    vm_from_pu: Float,
    vm_to_pu: Float,
    index: Int | None = None,
    name: str | None = None,
    max_p_mw: Float = ...,
    min_q_from_mvar: Float = ...,
    min_q_to_mvar: Float = ...,
    max_q_from_mvar: Float = ...,
    max_q_to_mvar: Float = ...,
    in_service: Bool = True,
    **kwargs,
) -> np.int64: ...
def create_measurement(
    net: pandapowerNet,
    meas_type: Literal["v", "p", "q", "i", "va", "ia"],
    element_type: Literal["bus", "line", "trafo", "trafo3w"],
    value: Float,
    std_dev: Float,
    element: Int,
    side: Literal["hv", "mv", "lv"] | Int | None = None,
    check_existing: Bool = False,
    index: Int | None = None,
    name: str | None = None,
    **kwargs,
) -> np.int64: ...
def create_pwl_cost(
    net: pandapowerNet,
    element: Int,
    et: _CostElementType,
    points: Collection[Collection[Float]],
    power_type: Literal["p", "q"] = "p",
    index: Int | None = None,
    check: Bool = True,
    **kwargs,
) -> np.int64: ...
def create_pwl_costs(
    net: pandapowerNet,
    elements: Collection[Int],
    et: ScalarOrVector[_CostElementType],
    points: ScalarOrVector[Collection[Collection[Float]]],
    power_type: ScalarOrVector[Literal["p", "q"]] = "p",
    index: Collection[Int] | None = None,
    check: ScalarOrVector[Bool] = True,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_poly_cost(
    net: pandapowerNet,
    element: Int,
    et: _CostElementType,
    cp1_eur_per_mw: Float,
    cp0_eur: Float = 0,
    cq1_eur_per_mvar: Float = 0,
    cq0_eur: Float = 0,
    cp2_eur_per_mw2: Float = 0,
    cq2_eur_per_mvar2: Float = 0,
    index: Int | None = None,
    check: Bool = True,
    **kwargs,
) -> np.int64: ...
def create_poly_costs(
    net: pandapowerNet,
    elements: Collection[Int],
    et: ScalarOrVector[_CostElementType],
    cp1_eur_per_mw: ScalarOrVector[Float],
    cp0_eur: ScalarOrVector[Float] = 0,
    cq1_eur_per_mvar: ScalarOrVector[Float] = 0,
    cq0_eur: ScalarOrVector[Float] = 0,
    cp2_eur_per_mw2: ScalarOrVector[Float] = 0,
    cq2_eur_per_mvar2: ScalarOrVector[Float] = 0,
    index: Collection[Int] | None = None,
    check: ScalarOrVector[Bool] = True,
    **kwargs,
) -> Array1D[np.int64]: ...
def create_group(
    net: pandapowerNet,
    element_types: ScalarOrVector[str],
    element_indices: Collection[Collection[Int | Any]],  # list of lists of indices or any column content
    name: str = "",
    reference_columns: ScalarOrVector[str] | None = None,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_group_from_dict(
    net: pandapowerNet,
    elements_dict: Mapping[str, Collection[Int | Any]],  # dict of lists of indices or any column content
    name: str = "",
    reference_column: ScalarOrVector[str] | None = None,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def try_astype(df: pd.DataFrame | dict[str, pd.Series[Any]], column: str, dtyp: DTypeLike) -> None: ...
