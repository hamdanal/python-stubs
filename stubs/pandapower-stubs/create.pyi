from collections.abc import Collection, Mapping
from typing import Any, Literal, SupportsFloat as Float, SupportsIndex as Int, TypeVar
from typing_extensions import TypeAlias

import numpy as np

from pandapower.auxiliary import pandapowerNet

_T = TypeVar("_T", bound=Any)
_CostElementType: TypeAlias = Literal["gen", "sgen", "ext_grid", "load", "dcline", "storage"]
_SGenGeneratorType: TypeAlias = Literal["current_source", "async", "async_doubly_fed"]
_ScalarOrVector: TypeAlias = _T | Collection[_T]
_Array1D: TypeAlias = np.ndarray[tuple[int], np.dtype[_T]]
_Bool: TypeAlias = bool | np.bool

def create_empty_network(
    name: str = "", f_hz: Int | Float = 50.0, sn_mva: Int | Float = 1, add_stdtypes: _Bool = True
) -> pandapowerNet: ...
def create_bus(
    net: pandapowerNet,
    vn_kv: Int | Float,
    name: str | None = None,
    index: Int | None = None,
    geodata: tuple[Int | Float, Int | Float] | None = None,
    type: Literal["b", "m", "n"] = "b",
    zone: str | None = None,
    in_service: _Bool = True,
    max_vm_pu: Int | Float = ...,
    min_vm_pu: Int | Float = ...,
    coords: Collection[tuple[Int | Float, Int | Float]] | None = None,
    **kwargs,
) -> np.int64: ...
def create_bus_dc(
    net: pandapowerNet,
    vn_kv: Int | Float,
    name: str | None = None,
    index: Int | None = None,
    geodata: tuple[Int | Float, Int | Float] | None = None,
    type: Literal["b", "m", "n"] = "b",
    zone: str | None = None,
    in_service: _Bool | None = True,
    max_vm_pu: Int | Float = ...,
    min_vm_pu: Int | Float = ...,
    coords: Collection[tuple[Int | Float, Int | Float]] | None = None,
    **kwargs,
) -> np.int64: ...
def create_buses(
    net: pandapowerNet,
    nr_buses: Int,
    vn_kv: _ScalarOrVector[Int | Float],
    index: _ScalarOrVector[Int] | None = None,
    name: _ScalarOrVector[str] | None = None,
    type: _ScalarOrVector[Literal["b", "m", "n"]] = "b",
    geodata: _ScalarOrVector[tuple[Int | Float, Int | Float]] | None = None,
    zone: _ScalarOrVector[str] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    max_vm_pu: _ScalarOrVector[Int | Float] | None = None,
    min_vm_pu: _ScalarOrVector[Int | Float] | None = None,
    coords: _ScalarOrVector[Collection[tuple[Int | Float, Int | Float]]] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_buses_dc(
    net: pandapowerNet,
    nr_buses_dc: Int,
    vn_kv: _ScalarOrVector[Int | Float],
    index: _ScalarOrVector[Int] | None = None,
    name: _ScalarOrVector[str] | None = None,
    type: _ScalarOrVector[Literal["b", "m", "n"]] = "b",
    geodata: _ScalarOrVector[tuple[Int | Float, Int | Float]] | None = None,
    zone: _ScalarOrVector[str] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    max_vm_pu: _ScalarOrVector[Int | Float] | None = None,
    min_vm_pu: _ScalarOrVector[Int | Float] | None = None,
    coords: _ScalarOrVector[Collection[tuple[Int | Float, Int | Float]]] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_load(
    net: pandapowerNet,
    bus: Int,
    p_mw: Int | Float,
    q_mvar: Int | Float = 0,
    const_z_percent: Int | Float = 0,
    const_i_percent: Int | Float = 0,
    sn_mva: Int | Float = ...,
    name: str | None = None,
    scaling: Int | Float = 1.0,
    index: Int | None = None,
    in_service: _Bool = True,
    type: Literal["wye", "delta"] = "wye",
    max_p_mw: Int | Float = ...,
    min_p_mw: Int | Float = ...,
    max_q_mvar: Int | Float = ...,
    min_q_mvar: Int | Float = ...,
    controllable: _Bool = ...,
    **kwargs,
) -> np.int64: ...
def create_loads(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: _ScalarOrVector[Int | Float],
    q_mvar: _ScalarOrVector[Int | Float] = 0,
    const_z_percent: _ScalarOrVector[Int | Float] = 0,
    const_i_percent: _ScalarOrVector[Int | Float] = 0,
    sn_mva: _ScalarOrVector[Int | Float] = ...,
    name: _ScalarOrVector[str] | None = None,
    scaling: _ScalarOrVector[Int | Float] = 1.0,
    index: Collection[Int] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    type: _ScalarOrVector[Literal["wye", "delta"]] | None = None,
    max_p_mw: _ScalarOrVector[Int | Float] | None = None,
    min_p_mw: _ScalarOrVector[Int | Float] | None = None,
    max_q_mvar: _ScalarOrVector[Int | Float] | None = None,
    min_q_mvar: _ScalarOrVector[Int | Float] | None = None,
    controllable: _ScalarOrVector[_Bool] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_asymmetric_load(
    net: pandapowerNet,
    bus: Int,
    p_a_mw: Int | Float = 0,
    p_b_mw: Int | Float = 0,
    p_c_mw: Int | Float = 0,
    q_a_mvar: Int | Float = 0,
    q_b_mvar: Int | Float = 0,
    q_c_mvar: Int | Float = 0,
    sn_mva: Int | Float = ...,
    name: str | None = None,
    scaling: Int | Float = 1.0,
    index: Int | None = None,
    in_service: _Bool = True,
    type: Literal["wye", "delta"] = "wye",
    **kwargs,
) -> np.int64: ...
def create_load_from_cosphi(
    net: pandapowerNet,
    bus: Int,
    sn_mva: Int | Float,
    cos_phi: Int | Float,
    mode: Literal["underexcited", "overexcited"],
    **kwargs,
) -> np.int64: ...
def create_sgen(
    net: pandapowerNet,
    bus: Int,
    p_mw: Int | Float,
    q_mvar: Int | Float = 0,
    sn_mva: Int | Float = ...,
    name: str | None = None,
    index: Int | None = None,
    scaling: Int | Float = 1,
    type: Literal["wye", "delta", "motor"] = "wye",
    in_service: _Bool = True,
    max_p_mw: Int | Float = ...,
    min_p_mw: Int | Float = ...,
    max_q_mvar: Int | Float = ...,
    min_q_mvar: Int | Float = ...,
    controllable: _Bool = ...,
    k: Int | Float = ...,
    rx: Int | Float | None = None,
    current_source: _Bool = True,
    generator_type: _SGenGeneratorType | None = None,
    max_ik_ka: Int | Float = ...,
    kappa: Int | Float = ...,
    lrc_pu: Int | Float = ...,
    **kwargs,
) -> np.int64: ...
def create_sgens(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: _ScalarOrVector[Int | Float],
    q_mvar: _ScalarOrVector[Int | Float] = 0,
    sn_mva: _ScalarOrVector[Int | Float] = ...,
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    scaling: _ScalarOrVector[Int | Float] = 1.0,
    type: _ScalarOrVector[Literal["wye", "delta", "motor"]] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    max_p_mw: _ScalarOrVector[Int | Float] | None = None,
    min_p_mw: _ScalarOrVector[Int | Float] | None = None,
    max_q_mvar: _ScalarOrVector[Int | Float] | None = None,
    min_q_mvar: _ScalarOrVector[Int | Float] | None = None,
    controllable: _ScalarOrVector[_Bool] | None = None,
    k: _ScalarOrVector[Int | Float] | None = None,
    rx: _ScalarOrVector[Int | Float] | None = None,
    current_source: _ScalarOrVector[_Bool] = True,
    generator_type: _ScalarOrVector[_SGenGeneratorType] = "current_source",
    max_ik_ka: _ScalarOrVector[Int | Float] = ...,
    kappa: _ScalarOrVector[Int | Float] = ...,
    lrc_pu: _ScalarOrVector[Int | Float] = ...,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_asymmetric_sgen(
    net: pandapowerNet,
    bus: Int,
    p_a_mw: Int | Float = 0,
    p_b_mw: Int | Float = 0,
    p_c_mw: Int | Float = 0,
    q_a_mvar: Int | Float = 0,
    q_b_mvar: Int | Float = 0,
    q_c_mvar: Int | Float = 0,
    sn_mva: Int | Float = ...,
    name: str | None = None,
    index: Int | None = None,
    scaling: Int | Float = 1,
    type: Literal["wye", "delta"] = "wye",
    in_service: _Bool = True,
    **kwargs,
) -> np.int64: ...
def create_sgen_from_cosphi(
    net: pandapowerNet,
    bus: Int,
    sn_mva: Int | Float,
    cos_phi: Int | Float,
    mode: Literal["underexcited", "overexcited"],
    **kwargs,
) -> np.int64: ...
def create_storage(
    net: pandapowerNet,
    bus: Int,
    p_mw: Int | Float,
    max_e_mwh: Int | Float,
    q_mvar: Int | Float = 0,
    sn_mva: Int | Float = ...,
    soc_percent: Int | Float = ...,
    min_e_mwh: Int | Float = 0.0,
    name: str | None = None,
    index: Int | None = None,
    scaling: Int | Float = 1.0,
    type: str | None = None,
    in_service: _Bool = True,
    max_p_mw: Int | Float = ...,
    min_p_mw: Int | Float = ...,
    max_q_mvar: Int | Float = ...,
    min_q_mvar: Int | Float = ...,
    controllable: _Bool = ...,
    **kwargs,
) -> np.int64: ...
def create_storages(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: _ScalarOrVector[Int | Float],
    max_e_mwh: _ScalarOrVector[Int | Float],
    q_mvar: _ScalarOrVector[Int | Float] = 0,
    sn_mva: _ScalarOrVector[Int | Float] = ...,
    soc_percent: _ScalarOrVector[Int | Float] = ...,
    min_e_mwh: _ScalarOrVector[Int | Float] = 0.0,
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    scaling: _ScalarOrVector[Int | Float] = 1.0,
    type: _ScalarOrVector[str] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    max_p_mw: _ScalarOrVector[Int | Float] = ...,
    min_p_mw: _ScalarOrVector[Int | Float] = ...,
    max_q_mvar: _ScalarOrVector[Int | Float] = ...,
    min_q_mvar: _ScalarOrVector[Int | Float] = ...,
    controllable: _ScalarOrVector[Int | Float] = ...,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_gen(
    net: pandapowerNet,
    bus: Int,
    p_mw: Int | Float,
    vm_pu: Int | Float = 1.0,
    sn_mva: Int | Float = ...,
    name: str | None = None,
    index: Int | None = None,
    max_q_mvar: Int | Float = ...,
    min_q_mvar: Int | Float = ...,
    min_p_mw: Int | Float = ...,
    max_p_mw: Int | Float = ...,
    min_vm_pu: Int | Float = ...,
    max_vm_pu: Int | Float = ...,
    scaling: Int | Float = 1.0,
    type: str | None = None,
    slack: _Bool = False,
    controllable: _Bool = ...,
    vn_kv: Int | Float = ...,
    xdss_pu: Int | Float = ...,
    rdss_ohm: Int | Float = ...,
    cos_phi: Int | Float = ...,
    pg_percent: Int | Float = ...,
    power_station_trafo: Int | None = None,
    in_service: _Bool = True,
    slack_weight: Int | Float = 0.0,
    **kwargs,
) -> np.int64: ...
def create_gens(
    net: pandapowerNet,
    buses: Collection[Int],
    p_mw: _ScalarOrVector[Int | Float],
    vm_pu: _ScalarOrVector[Int | Float] = 1.0,
    sn_mva: _ScalarOrVector[Int | Float] = ...,
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    max_q_mvar: _ScalarOrVector[Int | Float] | None = None,
    min_q_mvar: _ScalarOrVector[Int | Float] | None = None,
    min_p_mw: _ScalarOrVector[Int | Float] | None = None,
    max_p_mw: _ScalarOrVector[Int | Float] | None = None,
    min_vm_pu: _ScalarOrVector[Int | Float] | None = None,
    max_vm_pu: _ScalarOrVector[Int | Float] | None = None,
    scaling: _ScalarOrVector[Int | Float] = 1,
    type: _ScalarOrVector[str] | None = None,
    slack: _ScalarOrVector[_Bool] = False,
    controllable: _ScalarOrVector[_Bool] | None = None,
    vn_kv: _ScalarOrVector[Int | Float] | None = None,
    xdss_pu: _ScalarOrVector[Int | Float] | None = None,
    rdss_ohm: _ScalarOrVector[Int | Float] | None = None,
    cos_phi: _ScalarOrVector[Int | Float] | None = None,
    pg_percent: _ScalarOrVector[Int | Float] | None = None,
    power_station_trafo: _ScalarOrVector[Int] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    slack_weight: _ScalarOrVector[Int | Float] = 0.0,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_motor(
    net: pandapowerNet,
    bus: Int,
    pn_mech_mw: Int | Float,
    cos_phi: Int | Float,
    efficiency_percent: Int | Float = 100.0,
    loading_percent: Int | Float = 100.0,
    name: str | None = None,
    lrc_pu: Int | Float = ...,
    scaling: Int | Float = 1.0,
    vn_kv: Int | Float = ...,
    rx: Int | Float = ...,
    index: Int | None = None,
    in_service: _Bool = True,
    cos_phi_n: Int | Float = ...,
    efficiency_n_percent: Int | Float = ...,
    **kwargs,
) -> np.int64: ...
def create_ext_grid(
    net: pandapowerNet,
    bus: Int,
    vm_pu: Int | Float = 1.0,
    va_degree: Int | Float = 0.0,
    name: str | None = None,
    in_service: _Bool = True,
    s_sc_max_mva: Int | Float = ...,
    s_sc_min_mva: Int | Float = ...,
    rx_max: Int | Float = ...,
    rx_min: Int | Float = ...,
    max_p_mw: Int | Float = ...,
    min_p_mw: Int | Float = ...,
    max_q_mvar: Int | Float = ...,
    min_q_mvar: Int | Float = ...,
    index: Int | None = None,
    r0x0_max: Int | Float = ...,
    x0x_max: Int | Float = ...,
    controllable: _Bool = ...,
    slack_weight: Int | Float = 1.0,
    **kwargs,
) -> np.int64: ...
def create_line(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    length_km: Int | Float,
    std_type: str,
    name: str | None = None,
    index: Int | None = None,
    geodata: Collection[tuple[Int | Float, Int | Float]] | None = None,
    df: Int | Float = 1.0,
    parallel: Int = 1,
    in_service: _Bool = True,
    max_loading_percent: Int | Float = ...,
    alpha: Int | Float = ...,
    temperature_degree_celsius: Int | Float = ...,
    **kwargs,
) -> np.int64: ...
def create_line_dc(
    net: pandapowerNet,
    from_bus_dc: Int,
    to_bus_dc: Int,
    length_km: Int | Float,
    std_type: str,
    name: str | None = None,
    index: Int | None = None,
    geodata: Collection[tuple[Int | Float, Int | Float]] | None = None,
    df: Int | Float = 1.0,
    parallel: Int = 1,
    in_service: _Bool = True,
    max_loading_percent: Int | Float = ...,
    alpha: Int | Float = ...,
    temperature_degree_celsius: Int | Float = ...,
    **kwargs,
) -> np.int64: ...
def create_lines(
    net: pandapowerNet,
    from_buses: Collection[Int],
    to_buses: Collection[Int],
    length_km: _ScalarOrVector[Int | Float],
    std_type: _ScalarOrVector[str],
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    geodata: _ScalarOrVector[Collection[tuple[Int | Float, Int | Float]]] | None = None,
    df: _ScalarOrVector[Int | Float] = 1.0,
    parallel: _ScalarOrVector[Int] = 1,
    in_service: _ScalarOrVector[_Bool] = True,
    max_loading_percent: _ScalarOrVector[Int | Float] = ...,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_lines_dc(
    net: pandapowerNet,
    from_buses_dc: Collection[Int],
    to_buses_dc: Collection[Int],
    length_km: _ScalarOrVector[Int | Float],
    std_type: _ScalarOrVector[str],
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    geodata: _ScalarOrVector[Collection[tuple[Int | Float, Int | Float]]] | None = None,
    df: _ScalarOrVector[Int | Float] = 1.0,
    parallel: _ScalarOrVector[Int] = 1,
    in_service: _ScalarOrVector[_Bool] = True,
    max_loading_percent: _ScalarOrVector[Int | Float] = ...,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_line_from_parameters(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    length_km: Int | Float,
    r_ohm_per_km: Int | Float,
    x_ohm_per_km: Int | Float,
    c_nf_per_km: Int | Float,
    max_i_ka: Int | Float,
    name: str | None = None,
    index: Int | None = None,
    type: Literal["ol", "cs"] | None = None,
    geodata: Collection[tuple[Int | Float, Int | Float]] | None = None,
    in_service: _Bool = True,
    df: Int | Float = 1.0,
    parallel: Int = 1,
    g_us_per_km: Int | Float = 0.0,
    max_loading_percent: Int | Float = ...,
    alpha: Int | Float = ...,
    temperature_degree_celsius: Int | Float = ...,
    r0_ohm_per_km: Int | Float = ...,
    x0_ohm_per_km: Int | Float = ...,
    c0_nf_per_km: Int | Float = ...,
    g0_us_per_km: Int | Float = 0.0,
    endtemp_degree: Int | Float = ...,
    **kwargs,
) -> np.int64: ...
def create_line_dc_from_parameters(
    net: pandapowerNet,
    from_bus_dc: Int,
    to_bus_dc: Int,
    length_km: Int | Float,
    r_ohm_per_km: Int | Float,
    max_i_ka: Int | Float,
    name: str | None = None,
    index: Int | None = None,
    type: Literal["ol", "cs"] | None = None,
    geodata: Collection[tuple[Int | Float, Int | Float]] | None = None,
    in_service: _Bool = True,
    df: Int | Float = 1.0,
    parallel: Int = 1,
    max_loading_percent: Int | Float = ...,
    alpha: Int | Float = ...,
    temperature_degree_celsius: Int | Float = ...,
    g_us_per_km: Int | Float = 0.0,
    **kwargs,
) -> np.int64: ...
def create_lines_from_parameters(
    net: pandapowerNet,
    from_buses: Collection[Int],
    to_buses: Collection[Int],
    length_km: _ScalarOrVector[Int | Float],
    r_ohm_per_km: _ScalarOrVector[Int | Float],
    x_ohm_per_km: _ScalarOrVector[Int | Float],
    c_nf_per_km: _ScalarOrVector[Int | Float],
    max_i_ka: _ScalarOrVector[Int | Float],
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    type: _ScalarOrVector[Literal["ol", "cs"]] | None = None,
    geodata: _ScalarOrVector[Collection[tuple[Int | Float, Int | Float]]] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    df: _ScalarOrVector[Int | Float] = 1.0,
    parallel: _ScalarOrVector[Int] = 1,
    g_us_per_km: _ScalarOrVector[Int | Float] = 0.0,
    max_loading_percent: _ScalarOrVector[Int | Float] = ...,
    alpha: _ScalarOrVector[Int | Float] | None = None,
    temperature_degree_celsius: _ScalarOrVector[Int | Float] | None = None,
    r0_ohm_per_km: _ScalarOrVector[Int | Float] | None = None,
    x0_ohm_per_km: _ScalarOrVector[Int | Float] | None = None,
    c0_nf_per_km: _ScalarOrVector[Int | Float] | None = None,
    g0_us_per_km: _ScalarOrVector[Int | Float] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_lines_dc_from_parameters(
    net: pandapowerNet,
    from_buses_dc: Collection[Int],
    to_buses_dc: Collection[Int],
    length_km: _ScalarOrVector[Int | Float],
    r_ohm_per_km: _ScalarOrVector[Int | Float],
    max_i_ka: _ScalarOrVector[Int | Float],
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    type: _ScalarOrVector[Literal["ol", "cs"]] | None = None,
    geodata: _ScalarOrVector[Collection[tuple[Int | Float, Int | Float]]] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    df: _ScalarOrVector[Int | Float] = 1.0,
    parallel: _ScalarOrVector[Int] = 1,
    g_us_per_km: _ScalarOrVector[Int | Float] = 0.0,
    max_loading_percent: _ScalarOrVector[Int | Float] = ...,
    alpha: _ScalarOrVector[Int | Float] = ...,
    temperature_degree_celsius: _ScalarOrVector[Int | Float] = ...,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_transformer(
    net: pandapowerNet,
    hv_bus: Int,
    lv_bus: Int,
    std_type: str,
    name: str | None = None,
    tap_pos: Int = ...,
    in_service: _Bool = True,
    index: Int | None = None,
    max_loading_percent: Int | Float = ...,
    parallel: Int = 1,
    df: Int | Float = 1.0,
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    tap_dependency_table: _Bool = ...,
    id_characteristic_table: Int = ...,
    pt_percent: Int | Float = ...,
    oltc: _Bool = ...,
    xn_ohm: Int | Float = ...,
    tap2_pos: Int = ...,
    **kwargs,
) -> np.int64: ...
def create_transformer_from_parameters(
    net: pandapowerNet,
    hv_bus: Int,
    lv_bus: Int,
    sn_mva: Int | Float,
    vn_hv_kv: Int | Float,
    vn_lv_kv: Int | Float,
    vkr_percent: Int | Float,
    vk_percent: Int | Float,
    pfe_kw: Int | Float,
    i0_percent: Int | Float,
    shift_degree: Int | Float = 0.0,
    tap_side: Literal["hv", "lv"] | None = None,
    tap_neutral: Int = ...,
    tap_max: Int = ...,
    tap_min: Int = ...,
    tap_step_percent: Int | Float = ...,
    tap_step_degree: Int | Float = ...,
    tap_pos: Int = ...,
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    id_characteristic_table: Int = ...,
    in_service: _Bool = True,
    name: str | None = None,
    vector_group: str | None = None,
    index: Int | None = None,
    max_loading_percent: Int | Float = ...,
    parallel: Int = 1,
    df: Int | Float = 1.0,
    vk0_percent: Int | Float = ...,
    vkr0_percent: Int | Float = ...,
    mag0_percent: Int | Float = ...,
    mag0_rx: Int | Float = ...,
    si0_hv_partial: Int | Float = ...,
    pt_percent: Int | Float = ...,
    oltc: _Bool = ...,
    tap_dependency_table: _Bool = False,
    xn_ohm: Int | Float = ...,
    tap2_side: Literal["hv", "lv"] | None = None,
    tap2_neutral: Int = ...,
    tap2_max: Int = ...,
    tap2_step_percent: Int | Float = ...,
    tap2_step_degree: Int | Float = ...,
    tap2_pos: Int = ...,
    tap2_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    **kwargs,
) -> np.int64: ...
def create_transformers_from_parameters(
    net: pandapowerNet,
    hv_buses: Collection[Int],
    lv_buses: Collection[Int],
    sn_mva: _ScalarOrVector[Int | Float],
    vn_hv_kv: _ScalarOrVector[Int | Float],
    vn_lv_kv: _ScalarOrVector[Int | Float],
    vkr_percent: _ScalarOrVector[Int | Float],
    vk_percent: _ScalarOrVector[Int | Float],
    pfe_kw: _ScalarOrVector[Int | Float],
    i0_percent: _ScalarOrVector[Int | Float],
    shift_degree: _ScalarOrVector[Int | Float] = 0.0,
    tap_side: _ScalarOrVector[Literal["hv", "lv"]] | None = None,
    tap_neutral: _ScalarOrVector[Int] = ...,
    tap_max: _ScalarOrVector[Int] = ...,
    tap_min: _ScalarOrVector[Int] = ...,
    tap_step_percent: _ScalarOrVector[Int | Float] = ...,
    tap_step_degree: _ScalarOrVector[Int | Float] = ...,
    tap_pos: _ScalarOrVector[Int] = ...,
    tap_changer_type: _ScalarOrVector[Literal["Ratio", "Symmetrical", "Ideal", "Tabular"]] | None = None,
    id_characteristic_table: _ScalarOrVector[Int] = ...,
    in_service: _ScalarOrVector[_Bool] = True,
    name: _ScalarOrVector[str] | None = None,
    vector_group: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    max_loading_percent: _ScalarOrVector[Int | Float] = ...,
    parallel: _ScalarOrVector[Int] = 1,
    df: _ScalarOrVector[Int | Float] = 1.0,
    vk0_percent: _ScalarOrVector[Int | Float] = ...,
    vkr0_percent: _ScalarOrVector[Int | Float] = ...,
    mag0_percent: _ScalarOrVector[Int | Float] = ...,
    mag0_rx: _ScalarOrVector[Int | Float] = ...,
    si0_hv_partial: _ScalarOrVector[Int | Float] = ...,
    pt_percent: _ScalarOrVector[Int | Float] = ...,
    oltc: _ScalarOrVector[_Bool] = ...,
    tap_dependency_table: _ScalarOrVector[_Bool] = False,
    xn_ohm: _ScalarOrVector[Int | Float] | None = None,
    tap2_side: _ScalarOrVector[Literal["hv", "lv"]] | None = None,
    tap2_neutral: _ScalarOrVector[Int] = ...,
    tap2_max: _ScalarOrVector[Int] = ...,
    tap2_min: _ScalarOrVector[Int] = ...,
    tap2_step_percent: _ScalarOrVector[Int | Float] = ...,
    tap2_step_degree: _ScalarOrVector[Int | Float] = ...,
    tap2_pos: _ScalarOrVector[Int] = ...,
    tap2_changer_type: _ScalarOrVector[Literal["Ratio", "Symmetrical", "Ideal", "Tabular"]] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_transformer3w(
    net: pandapowerNet,
    hv_bus: Int,
    mv_bus: Int,
    lv_bus: Int,
    std_type: str,
    name: str | None = None,
    tap_pos: Int = ...,
    in_service: _Bool = True,
    index: Int | None = None,
    max_loading_percent: Int | Float = ...,
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    tap_at_star_point: _Bool = False,
    tap_dependency_table: _Bool = ...,
    id_characteristic_table: Int = ...,
    **kwargs,
) -> np.int64: ...
def create_transformer3w_from_parameters(
    net: pandapowerNet,
    hv_bus: Int,
    mv_bus: Int,
    lv_bus: Int,
    vn_hv_kv: Int | Float,
    vn_mv_kv: Int | Float,
    vn_lv_kv: Int | Float,
    sn_hv_mva: Int | Float,
    sn_mv_mva: Int | Float,
    sn_lv_mva: Int | Float,
    vk_hv_percent: Int | Float,
    vk_mv_percent: Int | Float,
    vk_lv_percent: Int | Float,
    vkr_hv_percent: Int | Float,
    vkr_mv_percent: Int | Float,
    vkr_lv_percent: Int | Float,
    pfe_kw: Int | Float,
    i0_percent: Int | Float,
    shift_mv_degree: Int | Float = 0.0,
    shift_lv_degree: Int | Float = 0.0,
    tap_side: Literal["hv", "mv", "lv"] | None = None,
    tap_step_percent: Int | Float = ...,
    tap_step_degree: Int | Float = ...,
    tap_pos: Int = ...,
    tap_neutral: Int = ...,
    tap_max: Int = ...,
    tap_changer_type: Literal["Ratio", "Symmetrical", "Ideal", "Tabular"] | None = None,
    tap_min: Int = ...,
    name: str | None = None,
    in_service: _Bool = True,
    index: Int | None = None,
    max_loading_percent: Int | Float = ...,
    tap_at_star_point: _Bool = False,
    vk0_hv_percent: Int | Float = ...,
    vk0_mv_percent: Int | Float = ...,
    vk0_lv_percent: Int | Float = ...,
    vkr0_hv_percent: Int | Float = ...,
    vkr0_mv_percent: Int | Float = ...,
    vkr0_lv_percent: Int | Float = ...,
    vector_group: str | None = None,
    tap_dependency_table: _Bool = False,
    id_characteristic_table: Int = ...,
    **kwargs,
) -> np.int64: ...
def create_transformers3w_from_parameters(
    net: pandapowerNet,
    hv_buses: Collection[Int],
    mv_buses: Collection[Int],
    lv_buses: Collection[Int],
    vn_hv_kv: _ScalarOrVector[Int | Float],
    vn_mv_kv: _ScalarOrVector[Int | Float],
    vn_lv_kv: _ScalarOrVector[Int | Float],
    sn_hv_mva: _ScalarOrVector[Int | Float],
    sn_mv_mva: _ScalarOrVector[Int | Float],
    sn_lv_mva: _ScalarOrVector[Int | Float],
    vk_hv_percent: _ScalarOrVector[Int | Float],
    vk_mv_percent: _ScalarOrVector[Int | Float],
    vk_lv_percent: _ScalarOrVector[Int | Float],
    vkr_hv_percent: _ScalarOrVector[Int | Float],
    vkr_mv_percent: _ScalarOrVector[Int | Float],
    vkr_lv_percent: _ScalarOrVector[Int | Float],
    pfe_kw: _ScalarOrVector[Int | Float],
    i0_percent: _ScalarOrVector[Int | Float],
    shift_mv_degree: _ScalarOrVector[Int | Float] = 0.0,
    shift_lv_degree: _ScalarOrVector[Int | Float] = 0.0,
    tap_side: _ScalarOrVector[Literal["hv", "mv", "lv"]] | None = None,
    tap_step_percent: _ScalarOrVector[Int | Float] = ...,
    tap_step_degree: _ScalarOrVector[Int | Float] = ...,
    tap_pos: _ScalarOrVector[Int] = ...,
    tap_neutral: _ScalarOrVector[Int] = ...,
    tap_max: _ScalarOrVector[Int] = ...,
    tap_min: _ScalarOrVector[Int] = ...,
    name: _ScalarOrVector[str] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    index: Collection[Int] | None = None,
    max_loading_percent: _ScalarOrVector[Int | Float] = ...,
    tap_at_star_point: _ScalarOrVector[_Bool] = False,
    tap_changer_type: _ScalarOrVector[Literal["Ratio", "Symmetrical", "Ideal", "Tabular"]] | None = None,
    vk0_hv_percent: _ScalarOrVector[Int | Float] = ...,
    vk0_mv_percent: _ScalarOrVector[Int | Float] = ...,
    vk0_lv_percent: _ScalarOrVector[Int | Float] = ...,
    vkr0_hv_percent: _ScalarOrVector[Int | Float] = ...,
    vkr0_mv_percent: _ScalarOrVector[Int | Float] = ...,
    vkr0_lv_percent: _ScalarOrVector[Int | Float] = ...,
    vector_group: _ScalarOrVector[str] | None = None,
    tap_dependency_table: _ScalarOrVector[_Bool] = False,
    id_characteristic_table: _ScalarOrVector[Int] = ...,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_switch(
    net: pandapowerNet,
    bus: Int,
    element: Int,
    et: Literal["l", "t", "t3", "b"],
    closed: _Bool = True,
    type: Literal["LS", "CB", "LBS", "DS"] | None = None,
    name: str | None = None,
    index: Int | None = None,
    z_ohm: Int | Float = 0,
    in_ka: Int | Float | None = None,
    **kwargs,
) -> np.int64: ...
def create_switches(
    net: pandapowerNet,
    buses: Collection[Int],
    elements: Collection[Int],
    et: _ScalarOrVector[Literal["l", "t", "t3", "b"]],
    closed: _ScalarOrVector[_Bool] = True,
    type: _ScalarOrVector[Literal["LS", "CB", "LBS", "DS"]] | None = None,
    name: _ScalarOrVector[str] | None = None,
    index: Collection[Int] | None = None,
    z_ohm: _ScalarOrVector[Int | Float] = 0,
    in_ka: _ScalarOrVector[Int | Float] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_shunt(
    net: pandapowerNet,
    bus: Int,
    q_mvar: Int | Float,
    p_mw: Int | Float = 0.0,
    vn_kv: Int | Float | None = None,
    step: Int = 1,
    max_step: Int = 1,
    name: str | None = None,
    step_dependency_table: _Bool = False,
    id_characteristic_table: Int = ...,
    in_service: _Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_shunts(
    net: pandapowerNet,
    buses: Collection[Int],
    q_mvar: _ScalarOrVector[Int | Float],
    p_mw: _ScalarOrVector[Int | Float] = 0.0,
    vn_kv: _ScalarOrVector[Int | Float] | None = None,
    step: _ScalarOrVector[Int] = 1,
    max_step: _ScalarOrVector[Int] = 1,
    name: _ScalarOrVector[str] | None = None,
    step_dependency_table: _ScalarOrVector[_Bool] = False,
    id_characteristic_table: _ScalarOrVector[Int] = ...,
    in_service: _ScalarOrVector[_Bool] = True,
    index: Collection[Int] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_shunt_as_capacitor(
    net: pandapowerNet,
    bus: Int,
    q_mvar: Int | Float,
    loss_factor: Int | Float,
    *,
    # keywords passed to create_shunt extracted from **kwargs
    vn_kv: Int | Float | None = None,
    step: Int = 1,
    max_step: Int = 1,
    name: str | None = None,
    step_dependency_table: _Bool = False,
    id_characteristic_table: Int = ...,
    in_service: _Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_svc(
    net: pandapowerNet,
    bus: Int,
    x_l_ohm: Int | Float,
    x_cvar_ohm: Int | Float,
    set_vm_pu: Int | Float,
    thyristor_firing_angle_degree: Int | Float,
    name: str | None = None,
    controllable: _Bool = True,
    in_service: _Bool = True,
    index: Int | None = None,
    min_angle_degree: Int | Float = 90,
    max_angle_degree: Int | Float = 180,
    **kwargs,
) -> np.int64: ...
def create_ssc(
    net: pandapowerNet,
    bus: Int,
    r_ohm: Int | Float,
    x_ohm: Int | Float,
    set_vm_pu: Int | Float = 1.0,
    vm_internal_pu: Int | Float = 1.0,
    va_internal_degree: Int | Float = 0.0,
    name: str | None = None,
    controllable: _Bool = True,
    in_service: _Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_vsc(
    net: pandapowerNet,
    bus: Int,
    bus_dc: Int,
    r_ohm: Int | Float,
    x_ohm: Int | Float,
    r_dc_ohm: Int | Float,
    pl_dc_mw: Int | Float = 0.0,
    control_mode_ac: Literal["vm_pu", "q_mvar"] = "vm_pu",
    control_value_ac: Int | Float = 1.0,
    control_mode_dc: Literal["vm_pu", "p_mw"] = "p_mw",
    control_value_dc: Int | Float = 0.0,
    name: str | None = None,
    controllable: _Bool = True,
    in_service: _Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_impedance(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    rft_pu: Int | Float,
    xft_pu: Int | Float,
    sn_mva: Int | Float,
    rtf_pu: Int | Float | None = None,
    xtf_pu: Int | Float | None = None,
    name: str | None = None,
    in_service: _Bool = True,
    index: Int | None = None,
    rft0_pu: Int | Float | None = None,
    xft0_pu: Int | Float | None = None,
    rtf0_pu: Int | Float | None = None,
    xtf0_pu: Int | Float | None = None,
    gf_pu: Int | Float = 0,
    bf_pu: Int | Float = 0,
    gt_pu: Int | Float | None = None,
    bt_pu: Int | Float | None = None,
    gf0_pu: Int | Float | None = None,
    bf0_pu: Int | Float | None = None,
    gt0_pu: Int | Float | None = None,
    bt0_pu: Int | Float | None = None,
    **kwargs,
) -> np.int64: ...
def create_impedances(
    net: pandapowerNet,
    from_buses: Collection[Int],
    to_buses: Collection[Int],
    rft_pu: _ScalarOrVector[Int | Float],
    xft_pu: _ScalarOrVector[Int | Float],
    sn_mva: _ScalarOrVector[Int | Float],
    rtf_pu: _ScalarOrVector[Int | Float] | None = None,
    xtf_pu: _ScalarOrVector[Int | Float] | None = None,
    name: _ScalarOrVector[str] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    index: Collection[Int] | None = None,
    rft0_pu: _ScalarOrVector[Int | Float] | None = None,
    xft0_pu: _ScalarOrVector[Int | Float] | None = None,
    rtf0_pu: _ScalarOrVector[Int | Float] | None = None,
    xtf0_pu: _ScalarOrVector[Int | Float] | None = None,
    gf_pu: _ScalarOrVector[Int | Float] = 0,
    bf_pu: _ScalarOrVector[Int | Float] = 0,
    gt_pu: _ScalarOrVector[Int | Float] | None = None,
    bt_pu: _ScalarOrVector[Int | Float] | None = None,
    gf0_pu: _ScalarOrVector[Int | Float] | None = None,
    bf0_pu: _ScalarOrVector[Int | Float] | None = None,
    gt0_pu: _ScalarOrVector[Int | Float] | None = None,
    bt0_pu: _ScalarOrVector[Int | Float] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_tcsc(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    x_l_ohm: Int | Float,
    x_cvar_ohm: Int | Float,
    set_p_to_mw: Int | Float,
    thyristor_firing_angle_degree: Int | Float,
    name: str | None = None,
    controllable: _Bool = True,
    in_service: _Bool = True,
    index: Int | None = None,
    min_angle_degree: Int | Float = 90,
    max_angle_degree: Int | Float = 180,
    **kwargs,
) -> np.int64: ...
def create_series_reactor_as_impedance(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    r_ohm: Int | Float,
    x_ohm: Int | Float,
    sn_mva: Int | Float,
    name: str | None = None,
    in_service: _Bool = True,
    index: Int | None = None,
    r0_ohm: Int | Float | None = None,
    x0_ohm: Int | Float | None = None,
    **kwargs,
) -> np.int64: ...
def create_ward(
    net: pandapowerNet,
    bus: Int,
    ps_mw: Int | Float,
    qs_mvar: Int | Float,
    pz_mw: Int | Float,
    qz_mvar: Int | Float,
    name: str | None = None,
    in_service: _Bool = True,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_wards(
    net: pandapowerNet,
    buses: Collection[Int],
    ps_mw: _ScalarOrVector[Int | Float],
    qs_mvar: _ScalarOrVector[Int | Float],
    pz_mw: _ScalarOrVector[Int | Float],
    qz_mvar: _ScalarOrVector[Int | Float],
    name: _ScalarOrVector[str] | None = None,
    in_service: _ScalarOrVector[_Bool] = True,
    index: Collection[Int] | None = None,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_xward(
    net: pandapowerNet,
    bus: Int,
    ps_mw: Int | Float,
    qs_mvar: Int | Float,
    pz_mw: Int | Float,
    qz_mvar: Int | Float,
    r_ohm: Int | Float,
    x_ohm: Int | Float,
    vm_pu: Int | Float,
    in_service: _Bool = True,
    name: str | None = None,
    index: Int | None = None,
    slack_weight: Int | Float = 0.0,
    **kwargs,
) -> np.int64: ...
def create_dcline(
    net: pandapowerNet,
    from_bus: Int,
    to_bus: Int,
    p_mw: Int | Float,
    loss_percent: Int | Float,
    loss_mw: Int | Float,
    vm_from_pu: Int | Float,
    vm_to_pu: Int | Float,
    index: Int | None = None,
    name: str | None = None,
    max_p_mw: Int | Float = ...,
    min_q_from_mvar: Int | Float = ...,
    min_q_to_mvar: Int | Float = ...,
    max_q_from_mvar: Int | Float = ...,
    max_q_to_mvar: Int | Float = ...,
    in_service: _Bool = True,
    **kwargs,
) -> np.int64: ...
def create_measurement(
    net: pandapowerNet,
    meas_type: Literal["v", "p", "q", "i", "va", "ia"],
    element_type: Literal["bus", "line", "trafo", "trafo3w"],
    value: Int | Float,
    std_dev: Int | Float,
    element: Int,
    side: Literal["hv", "mv", "lv"] | Int | None = None,
    check_existing: _Bool = False,
    index: Int | None = None,
    name: str | None = None,
    **kwargs,
) -> np.int64: ...
def create_pwl_cost(
    net: pandapowerNet,
    element: Int,
    et: _CostElementType,
    points: Collection[Collection[Int | Float]],
    power_type: Literal["p", "q"] = "p",
    index: Int | None = None,
    check: _Bool = True,
    **kwargs,
) -> np.int64: ...
def create_pwl_costs(
    net: pandapowerNet,
    elements: Collection[Int],
    et: _ScalarOrVector[_CostElementType],
    points: _ScalarOrVector[Collection[Collection[Int | Float]]],
    power_type: _ScalarOrVector[Literal["p", "q"]] = "p",
    index: Collection[Int] | None = None,
    check: _ScalarOrVector[_Bool] = True,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_poly_cost(
    net: pandapowerNet,
    element: Int,
    et: _CostElementType,
    cp1_eur_per_mw: Int | Float,
    cp0_eur: Int | Float = 0,
    cq1_eur_per_mvar: Int | Float = 0,
    cq0_eur: Int | Float = 0,
    cp2_eur_per_mw2: Int | Float = 0,
    cq2_eur_per_mvar2: Int | Float = 0,
    index: Int | None = None,
    check: _Bool = True,
    **kwargs,
) -> np.int64: ...
def create_poly_costs(
    net: pandapowerNet,
    elements: Collection[Int],
    et: _ScalarOrVector[_CostElementType],
    cp1_eur_per_mw: _ScalarOrVector[Int | Float],
    cp0_eur: _ScalarOrVector[Int | Float] = 0,
    cq1_eur_per_mvar: _ScalarOrVector[Int | Float] = 0,
    cq0_eur: _ScalarOrVector[Int | Float] = 0,
    cp2_eur_per_mw2: _ScalarOrVector[Int | Float] = 0,
    cq2_eur_per_mvar2: _ScalarOrVector[Int | Float] = 0,
    index: Collection[Int] | None = None,
    check: _ScalarOrVector[_Bool] = True,
    **kwargs,
) -> _Array1D[np.int64]: ...
def create_group(
    net: pandapowerNet,
    element_types: _ScalarOrVector[str],
    element_indices: Collection[Collection[Int | Any]],  # list of lists of indices or any column content
    name: str = "",
    reference_columns: _ScalarOrVector[str] | None = None,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
def create_group_from_dict(
    net: pandapowerNet,
    elements_dict: Mapping[str, Collection[Int | Any]],  # dict of lists of indices or any column content
    name: str = "",
    reference_column: _ScalarOrVector[str] | None = None,
    index: Int | None = None,
    **kwargs,
) -> np.int64: ...
