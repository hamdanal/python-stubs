from _typeshed import Incomplete

from pandapower.estimation.algorithm.matrix_base import BaseAlgebra
from pandapower.estimation.ppc_conversion import ExtendedPPCI

def get_estimator(base_class, estimator_name): ...

class BaseEstimatorIRWLS(BaseAlgebra):
    def __init__(self, eppci: ExtendedPPCI, **hyperparameters) -> None: ...
    def create_phi(self, E) -> None: ...

class BaseEstimatorOpt(BaseAlgebra):
    def __init__(self, eppci, **hyperparameters) -> None: ...
    def cost_function(self, E) -> None: ...
    def create_cost_jacobian(self, E) -> None: ...

class WLSEstimator(BaseEstimatorOpt, BaseEstimatorIRWLS):
    def __init__(self, eppci, **hyperparameters) -> None: ...
    def cost_function(self, E): ...
    def create_cost_jacobian(self, E): ...
    def create_phi(self, E): ...

class SHGMEstimatorIRWLS(BaseEstimatorIRWLS):
    a: Incomplete
    def __init__(self, eppci: ExtendedPPCI, **hyperparameters) -> None: ...
    def create_phi(self, E): ...
    def weight(self, E): ...

class LAVEstimator(BaseEstimatorOpt):
    def cost_function(self, E): ...
    def create_cost_jacobian(self, E): ...

class QCEstimatorOpt(BaseEstimatorOpt):
    a: Incomplete
    def __init__(self, eppci, **hyperparameters) -> None: ...
    def cost_function(self, E): ...
    def create_cost_jacobian(self, E): ...

class QLEstimatorOpt(BaseEstimatorOpt):
    a: Incomplete
    def __init__(self, eppci, **hyperparameters) -> None: ...
    def cost_function(self, E): ...
    def create_cost_jacobian(self, E): ...
