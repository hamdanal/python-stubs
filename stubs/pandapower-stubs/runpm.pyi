from _typeshed import Incomplete
from collections.abc import Callable, Mapping

from pandapower.auxiliary import pandapowerNet

def runpm(
    net: pandapowerNet,
    julia_file: str | None = None,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    pm_mip_solver: str = "cbc",
    pm_nl_solver: str = "ipopt",
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    delete_buffer_file: bool = True,
    pm_file_path: str | None = None,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_dc_opf(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_model: str = "DCPPowerModel",
    pm_solver: str = "ipopt",
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    delete_buffer_file: bool = True,
    pm_file_path: str | None = None,
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_ac_opf(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_tnep(
    net: pandapowerNet,
    julia_file: str | None = None,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "juniper",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_nl_solver: str = "ipopt",
    pm_mip_solver: str = "cbc",
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    delete_buffer_file: bool = True,
    pm_file_path: str | None = None,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_ots(
    net: pandapowerNet,
    julia_file: str | None = None,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "DCPPowerModel",
    pm_solver: str = "juniper",
    pm_nl_solver: str = "ipopt",
    pm_mip_solver: str = "cbc",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    delete_buffer_file: bool = True,
    pm_file_path: str | None = None,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_storage_opf(
    net: pandapowerNet,
    from_time_step,
    to_time_step,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    n_timesteps: int = 24,
    time_elapsed: float = 1.0,
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_solver: str = "juniper",
    pm_mip_solver: str = "cbc",
    pm_nl_solver: str = "ipopt",
    pm_model: str = "ACPPowerModel",
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    opf_flow_lim: str = "S",
    charge_efficiency: float = 1.0,
    discharge_efficiency: float = 1.0,
    standby_loss: float = 1e-08,
    p_loss: float = 1e-08,
    q_loss: float = 1e-08,
    pm_tol: float = 0.0001,
    pdm_dev_mode: bool = False,
    delete_buffer_file: bool = True,
    pm_file_path: str | None = None,
    **kwargs,
) -> None: ...
def runpm_vstab(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_multi_vstab(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_qflex(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_multi_qflex(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_ploss(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_loading(
    net: pandapowerNet,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-8,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    pm_file_path: str | None = None,
    delete_buffer_file: bool = True,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-8,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
def runpm_pf(
    net: pandapowerNet,
    julia_file: str | None = None,
    pp_to_pm_callback: Callable[..., Incomplete] | None = None,
    calculate_voltage_angles: bool = True,
    trafo_model: str = "t",
    delta: float = 1e-08,
    trafo3w_losses: str = "hv",
    check_connectivity: bool = True,
    correct_pm_network_data: bool = True,
    silence: bool = True,
    pm_model: str = "ACPPowerModel",
    pm_solver: str = "ipopt",
    pm_mip_solver: str = "cbc",
    pm_nl_solver: str = "ipopt",
    pm_time_limits: Mapping[str, float] | None = None,
    pm_log_level: int = 0,
    delete_buffer_file: bool = True,
    pm_file_path: str | None = None,
    opf_flow_lim: str = "S",
    pm_tol: float = 1e-08,
    pdm_dev_mode: bool = False,
    **kwargs,
) -> None: ...
