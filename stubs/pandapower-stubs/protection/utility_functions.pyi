from _typeshed import Incomplete
from collections.abc import Collection, Iterable
from typing import Any, TypeVar
from typing_extensions import deprecated

import numpy as np
import pandas as pd
from matplotlib.collections import PatchCollection

from pandapower._typing import Float, Int, ScalarOrVector
from pandapower.auxiliary import pandapowerNet

_I = TypeVar("_I", bound=Int)

def create_sc_bus(net_copy: pandapowerNet, sc_line_id: ScalarOrVector[Int], sc_fraction: Float) -> pandapowerNet: ...
def calc_faults_at_full_line(
    net: pandapowerNet,
    line: Int,
    location_step_size: Float = 0.01,
    start_location=0.01,
    end_location: Float = 1,
    sc_case: str = "min",
) -> list[float]: ...
def get_opposite_side_bus_from_switch(net: pandapowerNet, switch_id: Int) -> np.int64: ...
def get_opposite_side_bus_from_bus_line(net: pandapowerNet, bus_idx: Int, line_idx: Int) -> np.int64: ...
def get_from_bus_info_switch(net: pandapowerNet, switch_id: Int) -> bool: ...
def get_from_bus_info_bus_line(net: pandapowerNet, bus_idx: Int, line_idx: Int) -> bool: ...
def get_line_impedance(net: pandapowerNet, line_idx: Int) -> complex: ...
def get_lowest_impedance_line(net: pandapowerNet, lines: Iterable[_I]) -> _I: ...
def check_for_closed_bus_switches(net_copy: pandapowerNet) -> pandapowerNet: ...
def fuse_bus_switches(net: pandapowerNet, bus_switches: pd.Series[Any] | pd.DataFrame) -> pandapowerNet: ...
def get_fault_annotation(net: pandapowerNet, fault_current: Float = 0.0, font_size_bus: Float = 0.06) -> PatchCollection: ...
def get_sc_location_annotation(net: pandapowerNet, sc_location: Float, font_size_bus: Float = 0.06) -> PatchCollection: ...
def plot_tripped_grid(net: pandapowerNet, trip_decisions, sc_location, bus_size=0.055, plot_annotations: bool = True) -> None: ...
def plot_tripped_grid_protection_device(
    net: pandapowerNet, trip_decisions, sc_location, sc_bus, bus_size=0.055, plot_annotations: bool = True
) -> None: ...
def calc_line_intersection(m1, b1, m2, b2): ...
@deprecated("Use pandapower.get_connected_elements(net, 'line', bus_idx) instead!")
def get_connected_lines(net: pandapowerNet, bus_idx: Int): ...
@deprecated("Use pandapower.next_bus(net, bus, element_id instead!")
def next_buses(net: pandapowerNet, bus, element_id): ...
def source_to_end_path(net: pandapowerNet, start_bus, bus_list, bus_order): ...
@deprecated("Use pandapower.get_connected_switches(net, buses, consider='l', status='closed') instead!")
def get_connected_switches(net: pandapowerNet, buses): ...
@deprecated("Use pandapower.get_connected_buses_at_element(net, element, element_type='l', respect_in_service=False) instead!")
def connected_bus_in_line(net: pandapowerNet, element): ...
def switch_geodatas(net: pandapowerNet, size, distance_to_bus): ...
def create_I_t_plot(trip_decisions, switch_id) -> None: ...
def power_flow_end_points(net: pandapowerNet) -> tuple[list[np.int64], list[np.int64]]: ...
def bus_path_from_to_bus(net: pandapowerNet, radial_start_bus, loop_start_bus, end_bus) -> list[Incomplete]: ...
def get_switches_in_path(net: pandapowerNet, paths: Iterable[Collection[Incomplete]]) -> list[list[pd.Index[int]]]: ...
def get_vi_angle(net: pandapowerNet, switch_id: Int, **kwargs) -> float: ...
def bus_path_multiple_ext_bus(net: pandapowerNet) -> list[list[np.int64]]: ...
def get_line_path(net: pandapowerNet, bus_path: Collection[Int]) -> list[int]: ...
def parallel_lines(net: pandapowerNet) -> list[tuple[np.int64, np.int64]]: ...
def read_fuse_from_std_type(): ...
