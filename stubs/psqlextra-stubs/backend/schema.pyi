from _typeshed import Incomplete
from typing import Any

from django.db.models import Field, Model

class PostgresSchemaEditor:
    sql_create_view: str
    sql_replace_view: str
    sql_drop_view: str
    sql_create_materialized_view: str
    sql_drop_materialized_view: str
    sql_refresh_materialized_view: str
    sql_refresh_materialized_view_concurrently: str
    sql_partition_by: str
    sql_add_default_partition: str
    sql_add_hash_partition: str
    sql_add_range_partition: str
    sql_add_list_partition: str
    sql_delete_partition: str
    sql_table_comment: str
    side_effects: Incomplete
    deferred_sql: Incomplete
    introspection: Incomplete
    def __init__(self, connection, collect_sql: bool = False, atomic: bool = True) -> None: ...
    def create_model(self, model: Model) -> None: ...
    def delete_model(self, model: Model) -> None: ...
    def refresh_materialized_view_model(self, model: Model, concurrently: bool = False) -> None: ...
    def create_view_model(self, model: Model) -> None: ...
    def replace_view_model(self, model: Model) -> None: ...
    def delete_view_model(self, model: Model) -> None: ...
    def create_materialized_view_model(self, model: Model) -> None: ...
    def replace_materialized_view_model(self, model: Model) -> None: ...
    def delete_materialized_view_model(self, model: Model) -> None: ...
    def create_partitioned_model(self, model: Model) -> None: ...
    def delete_partitioned_model(self, model: Model) -> None: ...
    def add_range_partition(
        self, model: Model, name: str, from_values: Any, to_values: Any, comment: str | None = None
    ) -> None: ...
    def add_list_partition(self, model: Model, name: str, values: list[Any], comment: str | None = None) -> None: ...
    def add_hash_partition(self, model: Model, name: str, modulus: int, remainder: int, comment: str | None = None) -> None: ...
    def add_default_partition(self, model: Model, name: str, comment: str | None = None) -> None: ...
    def delete_partition(self, model: Model, name: str) -> None: ...
    def alter_db_table(self, model: Model, old_db_table: str, new_db_table: str) -> None: ...
    def add_field(self, model: Model, field: Field[Incomplete, Incomplete]) -> None: ...
    def remove_field(self, model: Model, field: Field[Incomplete, Incomplete]) -> None: ...
    def alter_field(
        self,
        model: Model,
        old_field: Field[Incomplete, Incomplete],
        new_field: Field[Incomplete, Incomplete],
        strict: bool = False,
    ) -> None: ...
    def set_comment_on_table(self, table_name: str, comment: str) -> None: ...
    def create_partition_table_name(self, model: Model, name: str) -> str: ...
