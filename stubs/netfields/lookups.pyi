from _typeshed import Incomplete

from django.db.models import Lookup, Transform, lookups

class InvalidLookup(Lookup[Incomplete]):
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> None: ...

class InvalidSearchLookup(Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> None: ...

class NetFieldDecoratorMixin:
    def process_lhs(self, qn: Incomplete, connection: Incomplete, lhs: Incomplete | None = None) -> tuple[str, Incomplete]: ...

class EndsWith(NetFieldDecoratorMixin, lookups.EndsWith): ...
class IEndsWith(NetFieldDecoratorMixin, lookups.IEndsWith): ...
class StartsWith(NetFieldDecoratorMixin, lookups.StartsWith): ...
class IStartsWith(NetFieldDecoratorMixin, lookups.IStartsWith): ...
class Regex(NetFieldDecoratorMixin, lookups.Regex): ...
class IRegex(NetFieldDecoratorMixin, lookups.IRegex): ...

class NetworkLookup:
    def get_prep_lookup(self) -> Incomplete: ...

class AddressLookup:
    def get_prep_lookup(self) -> Incomplete: ...

class NetContains(AddressLookup, Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...

class NetContained(NetworkLookup, Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...

class NetContainsOrEquals(AddressLookup, Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...

class NetContainedOrEqual(NetworkLookup, Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...

class NetOverlaps(NetworkLookup, Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...

class HostMatches(AddressLookup, Lookup[Incomplete]):
    lookup_name: str
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...

class Family(Transform):
    lookup_name: str
    def as_sql(self, compiler: Incomplete, connection: Incomplete) -> Incomplete: ...
    @property
    def output_field(self) -> Incomplete: ...

class _PrefixlenMixin:
    format_string: Incomplete
    def as_sql(self, qn: Incomplete, connection: Incomplete) -> Incomplete: ...
    def process_lhs(self, qn: Incomplete, connection: Incomplete, lhs: Incomplete | None = None) -> tuple[str, Incomplete]: ...
    def get_prep_lookup(self) -> Incomplete: ...

class MaxPrefixlen(_PrefixlenMixin, Lookup[Incomplete]):
    lookup_name: str
    format_string: str

class MinPrefixlen(_PrefixlenMixin, Lookup[Incomplete]):
    lookup_name: str
    format_string: str

class Prefixlen(Transform):
    lookup_name: str
    def as_sql(self, compiler: Incomplete, connection: Incomplete) -> Incomplete: ...
    @property
    def output_field(self) -> Incomplete: ...
