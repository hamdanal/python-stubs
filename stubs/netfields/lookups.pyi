from _typeshed import Incomplete
from typing import NoReturn

from django.db.backends.base.base import BaseDatabaseWrapper
from django.db.models import IntegerField, Lookup, Transform, lookups
from django.db.models.sql.compiler import SQLCompiler

class InvalidLookup(Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> NoReturn: ...

class InvalidSearchLookup(Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> NoReturn: ...

class NetFieldDecoratorMixin:
    def process_lhs(
        self, qn: SQLCompiler, connection: BaseDatabaseWrapper, lhs: Incomplete | None = None
    ) -> tuple[str, list | tuple]: ...

class EndsWith(NetFieldDecoratorMixin, lookups.EndsWith): ...
class IEndsWith(NetFieldDecoratorMixin, lookups.IEndsWith): ...
class StartsWith(NetFieldDecoratorMixin, lookups.StartsWith): ...
class IStartsWith(NetFieldDecoratorMixin, lookups.IStartsWith): ...
class Regex(NetFieldDecoratorMixin, lookups.Regex): ...
class IRegex(NetFieldDecoratorMixin, lookups.IRegex): ...

class NetworkLookup:
    def get_prep_lookup(self) -> Incomplete: ...

class AddressLookup:
    def get_prep_lookup(self) -> Incomplete: ...

class NetContains(AddressLookup, Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...

class NetContained(NetworkLookup, Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...

class NetContainsOrEquals(AddressLookup, Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...

class NetContainedOrEqual(NetworkLookup, Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...

class NetOverlaps(NetworkLookup, Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...

class HostMatches(AddressLookup, Lookup):
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...

class Family(Transform):
    def as_sql(self, compiler: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...
    @property
    def output_field(self) -> IntegerField: ...

class _PrefixlenMixin:
    format_string: str
    def as_sql(self, qn: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...
    def process_lhs(
        self, qn: SQLCompiler, connection: BaseDatabaseWrapper, lhs: Incomplete | None = None
    ) -> tuple[str, list | tuple]: ...
    def get_prep_lookup(self) -> int: ...

class MaxPrefixlen(_PrefixlenMixin, Lookup):
    format_string: str

class MinPrefixlen(_PrefixlenMixin, Lookup):
    format_string: str

class Prefixlen(Transform):
    def as_sql(self, compiler: SQLCompiler, connection: BaseDatabaseWrapper) -> tuple[str, list | tuple]: ...
    @property
    def output_field(self) -> IntegerField: ...
