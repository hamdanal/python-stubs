from typing import Literal, overload
from typing_extensions import TypeGuard

import numpy as np
from numpy.typing import ArrayLike, NDArray

from shapely.geometry.base import BaseGeometry

__all__ = [
    "has_z",
    "is_ccw",
    "is_closed",
    "is_empty",
    "is_geometry",
    "is_missing",
    "is_prepared",
    "is_ring",
    "is_simple",
    "is_valid",
    "is_valid_input",
    "is_valid_reason",
    "crosses",
    "contains",
    "contains_xy",
    "contains_properly",
    "covered_by",
    "covers",
    "disjoint",
    "dwithin",
    "equals",
    "intersects",
    "intersects_xy",
    "overlaps",
    "touches",
    "within",
    "equals_exact",
    "relate",
    "relate_pattern",
]

@overload
def has_z(geometry: BaseGeometry, **kwargs) -> bool: ...
@overload
def has_z(geometry: ArrayLike, **kwargs) -> NDArray[np.bool_]: ...
@overload
def is_ccw(geometry: BaseGeometry, **kwargs) -> bool: ...
@overload
def is_ccw(geometry: ArrayLike, **kwargs) -> NDArray[np.bool_]: ...
@overload
def is_closed(geometry: BaseGeometry, **kwargs) -> bool: ...
@overload
def is_closed(geometry: ArrayLike, **kwargs) -> NDArray[np.bool_]: ...
@overload
def is_empty(geometry: BaseGeometry, **kwargs) -> bool: ...
@overload
def is_empty(geometry: ArrayLike, **kwargs) -> NDArray[np.bool_]: ...
@overload
def is_geometry(geometry: ArrayLike, **kwargs) -> TypeGuard[NDArray[np.object_]]: ...
@overload
def is_geometry(geometry: object, **kwargs) -> TypeGuard[BaseGeometry]: ...
def is_missing(geometry, **kwargs): ...
@overload
def is_prepared(geometry: BaseGeometry, **kwargs) -> bool: ...
@overload
def is_prepared(geometry: ArrayLike, **kwargs) -> NDArray[np.bool_]: ...
@overload
def is_valid_input(geometry: BaseGeometry | None, **kwargs) -> Literal[True]: ...
@overload
def is_valid_input(geometry: ArrayLike, **kwargs) -> NDArray[np.bool_]: ...
@overload
def is_valid_input(geometry: object, **kwargs) -> bool: ...
def is_ring(geometry, **kwargs): ...
def is_simple(geometry, **kwargs): ...
def is_valid(geometry, **kwargs): ...
def is_valid_reason(geometry, **kwargs): ...
def crosses(a, b, **kwargs): ...
def contains(a, b, **kwargs): ...
def contains_properly(a, b, **kwargs): ...
def covered_by(a, b, **kwargs): ...
def covers(a, b, **kwargs): ...
def disjoint(a, b, **kwargs): ...
def equals(a, b, **kwargs): ...
def intersects(a, b, **kwargs): ...
def overlaps(a, b, **kwargs): ...
def touches(a, b, **kwargs): ...
def within(a, b, **kwargs): ...
def equals_exact(a, b, tolerance: float | ArrayLike = 0.0, **kwargs): ...
def relate(a, b, **kwargs): ...
def relate_pattern(a, b, pattern, **kwargs): ...
def dwithin(a, b, distance: float, **kwargs): ...
def contains_xy(geom, x: float | ArrayLike, y: float | ArrayLike | None = None, **kwargs): ...
def intersects_xy(geom, x: float | ArrayLike, y: float | ArrayLike | None = None, **kwargs): ...
