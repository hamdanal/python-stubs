from typing import Generic, TypeVar

from shapely.geometry.base import BaseGeometry

_GeoT = TypeVar("_GeoT", bound=BaseGeometry)

class PreparedGeometry(Generic[_GeoT]):
    context: _GeoT
    prepared: bool
    def __init__(self, context: _GeoT | PreparedGeometry[_GeoT]) -> None: ...
    def contains(self, other) -> bool: ...
    def contains_properly(self, other) -> bool: ...
    def covers(self, other) -> bool: ...
    def crosses(self, other) -> bool: ...
    def disjoint(self, other) -> bool: ...
    def intersects(self, other) -> bool: ...
    def overlaps(self, other) -> bool: ...
    def touches(self, other) -> bool: ...
    def within(self, other) -> bool: ...

def prep(ob: _GeoT | PreparedGeometry[_GeoT]) -> PreparedGeometry[_GeoT]: ...
