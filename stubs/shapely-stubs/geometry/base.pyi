from array import array
from collections.abc import Iterator
from typing import Any, Generic, Literal, NoReturn, TypeVar, overload
from typing_extensions import Self, deprecated

import numpy as np
from numpy.typing import NDArray

from shapely._typing import ArrayLike, GeoArray, GeoArrayLike, GeoArrayLikeSeq, OptGeoArrayLikeSeq
from shapely.constructive import BufferCapStyle, BufferJoinStyle
from shapely.coords import CoordinateSequence
from shapely.geometry.collection import GeometryCollection
from shapely.geometry.linestring import LineString
from shapely.geometry.multilinestring import MultiLineString
from shapely.geometry.multipoint import MultiPoint
from shapely.geometry.multipolygon import MultiPolygon
from shapely.geometry.point import Point
from shapely.geometry.polygon import Polygon
from shapely.lib import Geometry

GEOMETRY_TYPES: list[str]

@deprecated("Function 'geom_factory' is deprecated.")
def geom_factory(g: int, parent: object | None = None) -> Any: ...
def dump_coords(geom: BaseGeometry) -> list[tuple[float, float] | list[tuple[float, float]]]: ...

class CAP_STYLE:
    round: Literal[BufferCapStyle.round]
    flat: Literal[BufferCapStyle.flat]
    square: Literal[BufferCapStyle.square]

class JOIN_STYLE:
    round: Literal[BufferJoinStyle.round]
    mitre: Literal[BufferJoinStyle.mitre]
    bevel: Literal[BufferJoinStyle.bevel]

class BaseGeometry(Geometry):
    @deprecated(
        "Directly calling 'BaseGeometry()' is deprecated. To create an empty geometry, "
        "use one of the subclasses instead, for example 'GeometryCollection()'."
    )
    def __new__(self) -> GeometryCollection: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __format__(self, format_spec: str) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def coords(self) -> CoordinateSequence: ...
    @property
    def xy(self) -> tuple[array[float], array[float]]: ...
    @property
    def __geo_interface__(self) -> dict[str, Any]: ...
    @deprecated("Method 'geometryType()' is deprecated. Use attribute 'geom_type' instead.")
    def geometryType(self) -> str: ...
    @property
    @deprecated("Attribute 'type' is deprecated. Use attribute 'geom_type' instead.")
    def type(self) -> str: ...
    @property
    def wkt(self) -> str: ...
    @property
    def wkb(self) -> bytes: ...
    @property
    def wkb_hex(self) -> str: ...
    def svg(self, scale_factor: float = 1.0, **kwargs) -> str: ...
    def _repr_svg_(self) -> str: ...
    @property
    def geom_type(self) -> str: ...
    @property
    def area(self) -> float: ...
    @overload
    def distance(self, other: BaseGeometry | None) -> float: ...
    @overload
    def distance(self, other: OptGeoArrayLikeSeq) -> NDArray[np.float64]: ...
    @overload
    def hausdorff_distance(self, other: BaseGeometry | None) -> float: ...
    @overload
    def hausdorff_distance(self, other: OptGeoArrayLikeSeq) -> NDArray[np.float64]: ...
    @property
    def length(self) -> float: ...
    @property
    def minimum_clearance(self) -> float: ...
    @property
    def boundary(self) -> BaseGeometry: ...
    @property
    def bounds(self) -> tuple[float, float, float, float]: ...
    @property
    def centroid(self) -> Point: ...
    def point_on_surface(self) -> Point: ...
    def representative_point(self) -> Point: ...
    @property
    def convex_hull(self) -> BaseGeometry: ...
    @property
    def envelope(self) -> BaseGeometry: ...
    @property
    def oriented_envelope(self) -> BaseGeometry: ...
    @property
    def minimum_rotated_rectangle(self) -> BaseGeometry: ...
    @overload
    def buffer(
        self,
        distance: float,
        quad_segs: int = 16,
        cap_style: str = "round",
        join_style: str = "round",
        mitre_limit: float = 5.0,
        single_sided: bool = False,
    ) -> BaseGeometry: ...
    @overload
    @deprecated("Argument `quadsegs` is deprecated. Use argument `quad_segs` instead.")
    def buffer(
        self,
        distance: float,
        quad_segs: int = 16,
        cap_style: BufferCapStyle | Literal["round", "square", "flat"] = "round",
        join_style: BufferJoinStyle | Literal["round", "mitre", "bevel"] = "round",
        mitre_limit: float = 5.0,
        single_sided: bool = False,
        *,
        quadsegs: int | None = None,
        resolution: int | None = None,  # to be deprecated
    ) -> BaseGeometry: ...
    def simplify(self, tolerance: float, preserve_topology: bool = True) -> BaseGeometry: ...
    def normalize(self) -> BaseGeometry: ...
    @overload
    def difference(self, other: GeoArrayLike, grid_size: float | None = None) -> BaseGeometry: ...
    @overload
    def difference(self, other: None, grid_size: float | None = None) -> None: ...
    @overload
    def intersection(self, other: GeoArrayLike, grid_size: float | None = None) -> BaseGeometry: ...
    @overload
    def intersection(self, other: None, grid_size: float | None = None) -> None: ...
    @overload
    def symmetric_difference(self, other: GeoArrayLike, grid_size: float | None = None) -> BaseGeometry: ...
    @overload
    def symmetric_difference(self, other: None, grid_size: float | None = None) -> None: ...
    @overload
    def union(self, other: GeoArrayLike, grid_size: float | None = None) -> BaseGeometry: ...
    @overload
    def union(self, other: None, grid_size: float | None = None) -> None: ...
    __and__ = intersection
    __or__ = union
    __sub__ = difference
    __xor__ = symmetric_difference
    @property
    def has_z(self) -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def is_ring(self) -> bool: ...
    @property
    def is_closed(self) -> bool: ...
    @property
    def is_simple(self) -> bool: ...
    @property
    def is_valid(self) -> bool: ...
    @overload
    def relate(self, other: BaseGeometry) -> str: ...
    @overload
    def relate(self, other: OptGeoArrayLikeSeq) -> NDArray[np.str_]: ...
    @overload
    def relate(self, other: None) -> None: ...
    @overload
    def covers(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def covers(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def covered_by(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def covered_by(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def contains(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def contains(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def contains_properly(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def contains_properly(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def crosses(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def crosses(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def disjoint(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def disjoint(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def equals(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def equals(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def intersects(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def intersects(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def overlaps(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def overlaps(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def touches(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def touches(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def within(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def within(self, other: GeoArrayLikeSeq) -> NDArray[np.bool_]: ...
    @overload
    def dwithin(self, other: BaseGeometry | None, distance: float) -> bool: ...
    @overload
    def dwithin(self, other: GeoArrayLikeSeq, distance: float) -> NDArray[np.bool_]: ...
    @overload
    def dwithin(self, other: GeoArrayLike, distance: ArrayLike[float]) -> NDArray[np.bool_]: ...
    @overload
    def equals_exact(self, other: BaseGeometry | None, tolerance: float) -> bool: ...
    @overload
    def equals_exact(self, other: GeoArrayLikeSeq, tolerance: float) -> NDArray[np.bool_]: ...
    @overload
    def equals_exact(self, other: GeoArrayLike, tolerance: ArrayLike[float]) -> NDArray[np.bool_]: ...
    @deprecated("Method 'almost_equals()' is deprecated. Use method 'equals_exact()' instead.")
    def almost_equals(self, other: GeoArrayLike, decimal: int = 6) -> bool | NDArray[np.bool_]: ...
    @overload
    def relate_pattern(self, other: BaseGeometry | None, pattern: str) -> bool: ...
    @overload
    def relate_pattern(self, other: GeoArrayLikeSeq, pattern: str) -> NDArray[np.bool_]: ...
    @overload
    def line_locate_point(self, other: Point | None, normalized: bool = False) -> float: ...
    @overload
    def line_locate_point(self, other: GeoArrayLikeSeq, normalized: bool = False) -> NDArray[np.float64]: ...
    @overload
    def project(self, other: Point | None, normalized: bool = False) -> float: ...
    @overload
    def project(self, other: GeoArrayLikeSeq, normalized: bool = False) -> NDArray[np.float64]: ...
    @overload
    def line_interpolate_point(self, distance: float, normalized: bool = False) -> Point: ...
    @overload
    def line_interpolate_point(self, distance: ArrayLike[float], normalized: bool = False) -> GeoArray: ...
    @overload
    def interpolate(self, distance: float, normalized: bool = False) -> Point: ...
    @overload
    def interpolate(self, distance: ArrayLike[float], normalized: bool = False) -> GeoArray: ...
    @overload
    def segmentize(self, max_segment_length: float) -> Self: ...
    @overload
    def segmentize(self, max_segment_length: ArrayLike[float]) -> GeoArray: ...
    def reverse(self) -> Self: ...

class BaseMultipartGeometry(BaseGeometry):
    @property
    def coords(self) -> NoReturn: ...
    @property
    def geoms(self) -> GeometrySequence[Self]: ...
    def svg(self, scale_factor: float = 1.0, color: str | None = None) -> str: ...

_ParentT = TypeVar("_ParentT", bound=BaseMultipartGeometry)

class GeometrySequence(Generic[_ParentT]):
    def __init__(self, parent: _ParentT) -> None: ...
    @overload
    def __iter__(self: GeometrySequence[MultiPoint]) -> Iterator[Point]: ...
    @overload
    def __iter__(self: GeometrySequence[MultiLineString]) -> Iterator[LineString]: ...
    @overload
    def __iter__(self: GeometrySequence[MultiPolygon]) -> Iterator[Polygon]: ...
    # @overload
    # def __iter__(self) -> Iterator[BaseGeometry]: ...
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self: GeometrySequence[MultiPoint], key: int | np.integer[Any]) -> Point: ...
    @overload
    def __getitem__(self: GeometrySequence[MultiLineString], key: int | np.integer[Any]) -> LineString: ...
    @overload
    def __getitem__(self: GeometrySequence[MultiPolygon], key: int | np.integer[Any]) -> Polygon: ...
    @overload
    def __getitem__(self, key: int | np.integer[Any]) -> BaseGeometry: ...
    @overload
    def __getitem__(self, key: slice) -> _ParentT: ...

class EmptyGeometry(BaseGeometry):
    @deprecated(
        "The 'EmptyGeometry()' constructor is deprecated. Use one of the "
        "geometry subclasses instead, for example 'GeometryCollection()'."
    )
    def __new__(self) -> GeometryCollection: ...
