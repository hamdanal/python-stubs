from typing import Any, overload

from shapely._typing import GeoArray, GeoArrayLike
from shapely.geometry.base import BaseGeometry

__all__ = [
    "difference",
    "intersection",
    "intersection_all",
    "symmetric_difference",
    "symmetric_difference_all",
    "unary_union",
    "union",
    "union_all",
    "coverage_union",
    "coverage_union_all",
]

# Overloads with `-> BaseGeometry | Any` below could return None (cf. "the Any trick")
@overload
def difference(
    a: BaseGeometry | None, b: BaseGeometry | None, grid_size: float | None = None, **kwargs
) -> BaseGeometry | Any: ...
@overload
def difference(a: GeoArrayLike, b: GeoArrayLike, grid_size: float | None = None, **kwargs) -> GeoArray: ...
@overload
def intersection(
    a: BaseGeometry | None, b: BaseGeometry | None, grid_size: float | None = None, **kwargs
) -> BaseGeometry | Any: ...
@overload
def intersection(a: GeoArrayLike, b: GeoArrayLike, grid_size: float | None = None, **kwargs) -> GeoArray: ...
@overload
def intersection_all(geometries: GeoArrayLike | None, axis: None = None, **kwargs) -> BaseGeometry: ...
@overload
def intersection_all(geometries: BaseGeometry | None, axis: int, **kwargs) -> BaseGeometry: ...
@overload
def intersection_all(geometries: GeoArrayLike, axis: int, **kwargs) -> BaseGeometry | GeoArray: ...
@overload
def symmetric_difference(
    a: BaseGeometry | None, b: BaseGeometry | None, grid_size: float | None = None, **kwargs
) -> BaseGeometry | Any: ...
@overload
def symmetric_difference(a: GeoArrayLike, b: GeoArrayLike, grid_size: float | None = None, **kwargs) -> GeoArray: ...
@overload
def symmetric_difference_all(geometries: GeoArrayLike | None, axis: None = None, **kwargs) -> BaseGeometry: ...
@overload
def symmetric_difference_all(geometries: BaseGeometry | None, axis: int, **kwargs) -> BaseGeometry: ...
@overload
def symmetric_difference_all(geometries: GeoArrayLike, axis: int | None = None, **kwargs) -> BaseGeometry | GeoArray: ...
@overload
def union(a: BaseGeometry | None, b: BaseGeometry | None, grid_size: float | None = None, **kwargs) -> BaseGeometry | Any: ...
@overload
def union(a: GeoArrayLike, b: GeoArrayLike, grid_size: float | None = None, **kwargs) -> GeoArray: ...
@overload
def union_all(geometries: GeoArrayLike | None, grid_size: float | None = None, axis: None = None, **kwargs) -> BaseGeometry: ...
@overload
def union_all(geometries: BaseGeometry | None, grid_size: float | None = None, *, axis: int, **kwargs) -> BaseGeometry: ...
@overload
def union_all(geometries: BaseGeometry | None, grid_size: float | None, axis: int, **kwargs) -> BaseGeometry: ...
@overload
def union_all(geometries: GeoArrayLike, grid_size: float | None = None, *, axis: int, **kwargs) -> BaseGeometry | GeoArray: ...
@overload
def union_all(geometries: GeoArrayLike, grid_size: float | None, axis: int, **kwargs) -> BaseGeometry | GeoArray: ...

unary_union = union_all

def coverage_union(a: GeoArrayLike, b: GeoArrayLike, **kwargs): ...
def coverage_union_all(geometries: GeoArrayLike, axis: int | None = None, **kwargs): ...
