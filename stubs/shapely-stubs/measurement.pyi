from typing import overload

import numpy as np
from numpy.typing import NDArray

from shapely._typing import ArrayLike, OptGeoArrayLike, OptGeoArrayLikeSeq
from shapely.geometry.base import BaseGeometry

__all__ = [
    "area",
    "distance",
    "bounds",
    "total_bounds",
    "length",
    "hausdorff_distance",
    "frechet_distance",
    "minimum_clearance",
    "minimum_bounding_radius",
]

@overload
def area(geometry: BaseGeometry | None, **kwargs) -> float: ...
@overload
def area(geometry: OptGeoArrayLikeSeq, **kwargs) -> NDArray[np.float64]: ...
@overload
def distance(a: BaseGeometry | None, b: BaseGeometry | None, **kwargs) -> float: ...
@overload
def distance(a: OptGeoArrayLike, b: OptGeoArrayLike, **kwargs) -> NDArray[np.float64]: ...
def bounds(geometry: OptGeoArrayLike, **kwargs) -> NDArray[np.float64]: ...
def total_bounds(geometry: OptGeoArrayLike, **kwargs) -> NDArray[np.float64]: ...
@overload
def length(geometry: BaseGeometry | None, **kwargs) -> float: ...
@overload
def length(geometry: OptGeoArrayLikeSeq, **kwargs) -> NDArray[np.float64]: ...
def hausdorff_distance(a, b, densify: ArrayLike[float] | None = None, **kwargs): ...
def frechet_distance(a, b, densify: ArrayLike[float] | None = None, **kwargs): ...
@overload
def minimum_clearance(geometry: BaseGeometry | None, **kwargs) -> float: ...
@overload
def minimum_clearance(geometry: OptGeoArrayLikeSeq, **kwargs) -> NDArray[np.float64]: ...
@overload
def minimum_bounding_radius(geometry: BaseGeometry | None, **kwargs) -> float: ...
@overload
def minimum_bounding_radius(geometry: OptGeoArrayLikeSeq, **kwargs) -> NDArray[np.float64]: ...
