from _typeshed import Incomplete, SupportsGetItem
from collections.abc import Iterable
from typing import TypeVar

import numpy as np
import pandas as pd
from matplotlib._typing import Color
from matplotlib.axes import Axes
from matplotlib.figure import Figure
from matplotlib.text import Text
from matplotlib.ticker import Locator
from numpy.typing import ArrayLike, DTypeLike
from seaborn.axisgrid import Grid

_T = TypeVar("_T", bound=SupportsGetItem)

def ci_to_errsize(cis: ArrayLike, heights: ArrayLike) -> np.ndarray: ...
def desaturate(color: Color, prop: float) -> tuple[float, float, float]: ...
def saturate(color: Color) -> tuple[float, float, float]: ...
def set_hls_values(
    color: Color, h: float | None = None, l: float | None = None, s: float | None = None
) -> tuple[float, float, float]: ...
def remove_na(vector: _T) -> _T: ...
def get_color_cycle() -> list[str]: ...
def despine(
    fig: Figure | None = None,
    ax: Axes | None = None,
    top: bool = True,
    right: bool = True,
    left: bool = False,
    bottom: bool = False,
    offset: int | dict | None = None,
    trim: bool = False,
) -> None: ...
def move_legend(obj: Grid | Axes | Figure, loc: str | int, **kwargs: Incomplete) -> None: ...
def ci(a: ArrayLike, which: float | ArrayLike = 95, axis: int | tuple[int, ...] | None = None) -> Incomplete: ...
def get_dataset_names() -> list[str]: ...
def get_data_home(data_home: str | None = None) -> str: ...
def load_dataset(name: str, cache: bool = True, data_home: str | None = None, **kws) -> pd.DataFrame: ...
def axis_ticklabels_overlap(labels: Iterable[Text]) -> bool: ...
def axes_ticklabels_overlap(ax: Axes) -> tuple[bool, bool]: ...
def locator_to_legend_entries(locator: Locator, limits: Iterable[float], dtype: DTypeLike) -> tuple[list, list]: ...
def relative_luminance(color: Color | ArrayLike) -> float | np.ndarray: ...
def to_utf8(obj: object) -> str: ...
